import { EventEmitter } from '@angular/core';
/*
  Clase para manejar los usuarios que hay en un canal (mensaje inicial de usuarios por names)
*/
// @dynamic
export class UsersHandler {
    static addUsersToChannel(channel, users) {
        this.usersInChannel[channel] = users;
        this.usersInChannelResponse.emit(new ChannelAndUserList(channel, users));
    }
    static getChannelOfMessage(message) {
        const messages = /(=|@|\*)([^:]+):/.exec(message);
        if (messages && messages.length > 2) {
            return messages[2].trim();
        }
        else {
            console.error('GCOM, ', message);
        }
    }
    static getUsersInChannel(channel) {
        return this.usersInChannel[channel];
    }
    static setHandler(hdlr) {
        this.usersInChannelResponse.subscribe(data => {
            hdlr.onUserList(data.channel, data.userList);
        });
    }
}
UsersHandler.usersInChannel = {};
UsersHandler.usersInChannelResponse = new EventEmitter();
export class ChannelAndUserList {
    constructor(channel, userList) {
        this.channel = channel;
        this.userList = userList;
    }
}
export class ChannelUserList {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnMuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9hbGV4YS9naXQvSVJDb3JlL3Byb2plY3RzL2lyY29yZS9zcmMvIiwic291cmNlcyI6WyJsaWIvaGFuZGxlcnMvVXNlcnMuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdDOztFQUVFO0FBQ0YsV0FBVztBQUNYLE1BQU0sT0FBTyxZQUFZO0lBS2hCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsS0FBc0I7UUFDckUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDckMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxNQUFNLENBQUMsbUJBQW1CLENBQUMsT0FBZTtRQUMvQyxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBRyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDM0I7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFlO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFnQjtRQUN2QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXpCdUIsMkJBQWMsR0FBb0IsRUFBRSxDQUFDO0FBQ3RDLG1DQUFzQixHQUFxQyxJQUFJLFlBQVksRUFBc0IsQ0FBQztBQTRCM0gsTUFBTSxPQUFPLGtCQUFrQjtJQUk3QixZQUFZLE9BQWUsRUFBRSxRQUF5QjtRQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZUFBZTtDQUUzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlckluQ2hhbm5lbCB9IGZyb20gJy4uL2R0by9Vc2VySW5DaGFubmVsJztcblxuLypcbiAgQ2xhc2UgcGFyYSBtYW5lamFyIGxvcyB1c3VhcmlvcyBxdWUgaGF5IGVuIHVuIGNhbmFsIChtZW5zYWplIGluaWNpYWwgZGUgdXN1YXJpb3MgcG9yIG5hbWVzKVxuKi9cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgVXNlcnNIYW5kbGVyIHtcblxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSB1c2Vyc0luQ2hhbm5lbDogQ2hhbm5lbFVzZXJMaXN0ID0ge307XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdXNlcnNJbkNoYW5uZWxSZXNwb25zZTogRXZlbnRFbWl0dGVyPENoYW5uZWxBbmRVc2VyTGlzdD4gPSBuZXcgRXZlbnRFbWl0dGVyPENoYW5uZWxBbmRVc2VyTGlzdD4oKTtcblxuICBwdWJsaWMgc3RhdGljIGFkZFVzZXJzVG9DaGFubmVsKGNoYW5uZWw6IHN0cmluZywgdXNlcnM6IFVzZXJJbkNoYW5uZWxbXSkge1xuICAgIHRoaXMudXNlcnNJbkNoYW5uZWxbY2hhbm5lbF0gPSB1c2VycztcbiAgICB0aGlzLnVzZXJzSW5DaGFubmVsUmVzcG9uc2UuZW1pdChuZXcgQ2hhbm5lbEFuZFVzZXJMaXN0KGNoYW5uZWwsIHVzZXJzKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldENoYW5uZWxPZk1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSAvKD18QHxcXCopKFteOl0rKTovLmV4ZWMobWVzc2FnZSk7XG4gICAgaWYobWVzc2FnZXMgJiYgbWVzc2FnZXMubGVuZ3RoID4gMikge1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzWzJdLnRyaW0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignR0NPTSwgJywgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRVc2Vyc0luQ2hhbm5lbChjaGFubmVsOiBzdHJpbmcpOiBVc2VySW5DaGFubmVsW10ge1xuICAgIHJldHVybiB0aGlzLnVzZXJzSW5DaGFubmVsW2NoYW5uZWxdO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzZXRIYW5kbGVyKGhkbHI6IE9uVXNlckxpc3QpIHtcbiAgICB0aGlzLnVzZXJzSW5DaGFubmVsUmVzcG9uc2Uuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgaGRsci5vblVzZXJMaXN0KGRhdGEuY2hhbm5lbCwgZGF0YS51c2VyTGlzdCk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnQgY2xhc3MgQ2hhbm5lbEFuZFVzZXJMaXN0IHtcbiAgY2hhbm5lbDogc3RyaW5nO1xuICB1c2VyTGlzdDogVXNlckluQ2hhbm5lbFtdO1xuXG4gIGNvbnN0cnVjdG9yKGNoYW5uZWw6IHN0cmluZywgdXNlckxpc3Q6IFVzZXJJbkNoYW5uZWxbXSkge1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgdGhpcy51c2VyTGlzdCA9IHVzZXJMaXN0O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFubmVsVXNlckxpc3Qge1xuICBba2V5OiBzdHJpbmddOiBVc2VySW5DaGFubmVsW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT25Vc2VyTGlzdCB7XG4gIG9uVXNlckxpc3QoY2hhbm5lbDogc3RyaW5nLCB1c2VyczogVXNlckluQ2hhbm5lbFtdKTtcbn1cbiJdfQ==