import { EventEmitter } from '@angular/core';
import { ValidRegex } from '../utils/validRegex';
/**
 * Clase para gestionar los cambios de modos en un canal (sobre un usuario)
 */
// @dynamic
export class ModeHandler {
    static modeParser(rawMessage) {
        let modeRaw = rawMessage.split(' MODE ')[1];
        if (modeRaw.indexOf('#') == -1) {
            const modeCut = modeRaw.split(':');
            const regex = ValidRegex.getRegex(ValidRegex.modeRegex()).exec(modeCut[1]);
            return [
                undefined,
                regex[1],
                regex[2].trim(),
                modeCut[0].trim() // usuario
            ];
        }
        else {
            const regex = ValidRegex.channelRegex() +
                '\\s' + ValidRegex.modeRegex() + '\\s\\:?' + // modos
                ValidRegex.userRegex();
            const regOut = ValidRegex.getRegex(regex).exec(modeRaw);
            if (regOut) {
                return [
                    undefined,
                    regOut[2],
                    regOut[3].trim(),
                    regOut[4]
                ];
            }
            else {
                // modo de canal?
                const modos = modeRaw.split(':');
                return [
                    undefined,
                    undefined,
                    modos[1],
                    undefined
                ];
            }
        }
    }
    static changeMode(mode) {
        this.modeChange.emit(mode);
    }
}
ModeHandler.modeChange = new EventEmitter();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kZS5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL2FsZXhhL2dpdC9JUkNvcmUvcHJvamVjdHMvaXJjb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9oYW5kbGVycy9Nb2RlLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakQ7O0dBRUc7QUFDSCxXQUFXO0FBQ1gsTUFBTSxPQUFPLFdBQVc7SUFJZixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQWtCO1FBQ3pDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0UsT0FBTztnQkFDTCxTQUFTO2dCQUNULEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVTthQUM3QixDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxZQUFZLEVBQUU7Z0JBQ3ZDLEtBQUssR0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEdBQUMsU0FBUyxHQUFFLFFBQVE7Z0JBQ2hELFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN2QixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUNoQyxLQUFLLENBQ04sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEIsSUFBRyxNQUFNLEVBQUU7Z0JBQ1QsT0FBTztvQkFDTCxTQUFTO29CQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ1QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtvQkFDaEIsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDVixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsaUJBQWlCO2dCQUNqQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPO29CQUNMLFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNSLFNBQVM7aUJBQ1YsQ0FBQTthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFhO1FBQ3BDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7O0FBMUNzQixzQkFBVSxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZXdNb2RlIH0gZnJvbSAnLi4vZHRvL05ld01vZGUnO1xuaW1wb3J0IHsgVmFsaWRSZWdleCB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkUmVnZXgnO1xuXG4vKipcbiAqIENsYXNlIHBhcmEgZ2VzdGlvbmFyIGxvcyBjYW1iaW9zIGRlIG1vZG9zIGVuIHVuIGNhbmFsIChzb2JyZSB1biB1c3VhcmlvKVxuICovXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIE1vZGVIYW5kbGVyIHtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IG1vZGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOZXdNb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXI8TmV3TW9kZT4oKTtcblxuICBwdWJsaWMgc3RhdGljIG1vZGVQYXJzZXIocmF3TWVzc2FnZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGxldCBtb2RlUmF3ID0gcmF3TWVzc2FnZS5zcGxpdCgnIE1PREUgJylbMV07XG4gICAgaWYobW9kZVJhdy5pbmRleE9mKCcjJykgPT0gLTEpIHtcbiAgICAgIGNvbnN0IG1vZGVDdXQgPSBtb2RlUmF3LnNwbGl0KCc6Jyk7XG4gICAgICBjb25zdCByZWdleCA9IFZhbGlkUmVnZXguZ2V0UmVnZXgoVmFsaWRSZWdleC5tb2RlUmVnZXgoKSkuZXhlYyhtb2RlQ3V0WzFdKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgcmVnZXhbMV0sIC8vICsgbyAtXG4gICAgICAgIHJlZ2V4WzJdLnRyaW0oKSwgLy8gbW9kb1xuICAgICAgICBtb2RlQ3V0WzBdLnRyaW0oKSAvLyB1c3VhcmlvXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZWdleCA9IFZhbGlkUmVnZXguY2hhbm5lbFJlZ2V4KCkrXG4gICAgICAnXFxcXHMnK1ZhbGlkUmVnZXgubW9kZVJlZ2V4KCkrJ1xcXFxzXFxcXDo/JysgLy8gbW9kb3NcbiAgICAgIFZhbGlkUmVnZXgudXNlclJlZ2V4KCk7XG4gICAgICBjb25zdCByZWdPdXQgPSBWYWxpZFJlZ2V4LmdldFJlZ2V4KFxuICAgICAgICByZWdleFxuICAgICAgKS5leGVjKG1vZGVSYXcpO1xuICAgICAgaWYocmVnT3V0KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHJlZ091dFsyXSxcbiAgICAgICAgICByZWdPdXRbM10udHJpbSgpLFxuICAgICAgICAgIHJlZ091dFs0XVxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbW9kbyBkZSBjYW5hbD9cbiAgICAgICAgY29uc3QgbW9kb3MgPSBtb2RlUmF3LnNwbGl0KCc6Jyk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBtb2Rvc1sxXSxcbiAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY2hhbmdlTW9kZShtb2RlOiBOZXdNb2RlKSB7XG4gICAgdGhpcy5tb2RlQ2hhbmdlLmVtaXQobW9kZSk7XG4gIH1cblxufVxuIl19