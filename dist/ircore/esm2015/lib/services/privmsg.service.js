import { EventEmitter, Injectable } from '@angular/core';
import { IndividualMessageTypes } from '../dto/IndividualMessage';
import { MessageHandler } from '../handlers/Message.handler';
import { PostProcessor } from '../utils/PostProcessor';
import { Author } from './ChannelData';
import { PrivmsgData } from './PrivmsgData';
import { UserInfoService } from './user-info.service';
import * as i0 from "@angular/core";
import * as i1 from "./user-info.service";
export class PrivmsgService {
    constructor(userSrv) {
        this.userSrv = userSrv;
        this.messagesReceived = new EventEmitter();
        this.newPrivOpened = new EventEmitter();
        this.closedPriv = new EventEmitter();
        this.privMsgs = {};
        MessageHandler.setHandler(this);
        this.history = JSON.parse(localStorage.getItem('pv_history'));
        if (!this.history) {
            this.history = {};
        }
    }
    onMessageReceived(message) {
        if (message.messageType == IndividualMessageTypes.PRIVMSG) {
            const msgAuthor = message.privateAuthor ? message.privateAuthor : message.author;
            const msg = {
                message: message.message,
                messageWithMetadata: PostProcessor.processMessage(message.message, msgAuthor, this.userSrv.getNick()),
                author: new Author(msgAuthor),
                date: message.date + ' ' + message.time,
                special: message.meAction,
                target: message.channel
            };
            if (this.privMsgs[message.author]) {
                this.privMsgs[message.author].messages.push(msg);
            }
            else {
                this.newPrivOpened.emit(message.author);
                this.privMsgs[message.author] = new PrivmsgData();
                this.privMsgs[message.author].user = message.author;
                this.privMsgs[message.author].messages.push(msg);
            }
            this.messagesReceived.emit(msg);
            this.saveHistory(message.author, msg);
        }
    }
    saveHistory(author, msg) {
        if (!this.history[author]) {
            this.history[author] = [];
        }
        const msC = Object.assign({}, msg);
        msC.fromHistory = true;
        this.history[author].push(msC);
        localStorage.setItem('pv_history', JSON.stringify(this.history));
    }
    getHistory(author) {
        return this.history[author];
    }
    getPrivate(nick) {
        if (!this.privMsgs[nick]) {
            this.privMsgs[nick] = new PrivmsgData();
            this.privMsgs[nick].user = nick;
            this.newPrivOpened.emit(nick);
        }
        return this.privMsgs[nick];
    }
    closePrivate(nick) {
        delete this.privMsgs[nick];
        this.closedPriv.emit(nick);
    }
}
PrivmsgService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PrivmsgService_Factory() { return new PrivmsgService(i0.ɵɵinject(i1.UserInfoService)); }, token: PrivmsgService, providedIn: "root" });
PrivmsgService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PrivmsgService.ctorParameters = () => [
    { type: UserInfoService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdm1zZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL2FsZXhhL2dpdC9JUkNvcmUvcHJvamVjdHMvaXJjb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wcml2bXNnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFxQixzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxjQUFjLEVBQXFCLE1BQU0sNkJBQTZCLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7QUFLdEQsTUFBTSxPQUFPLGNBQWM7SUFTekIsWUFBb0IsT0FBd0I7UUFBeEIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFQNUIscUJBQWdCLEdBQWlDLElBQUksWUFBWSxFQUFrQixDQUFDO1FBQ3BGLGtCQUFhLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFDakUsZUFBVSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3ZFLGFBQVEsR0FBbUMsRUFBRSxDQUFDO1FBS25ELGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUNuQjtJQUNI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QyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7OztZQXZFRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQUpRLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEluZGl2aWR1YWxNZXNzYWdlLCBJbmRpdmlkdWFsTWVzc2FnZVR5cGVzIH0gZnJvbSAnLi4vZHRvL0luZGl2aWR1YWxNZXNzYWdlJztcbmltcG9ydCB7IE1lc3NhZ2VIYW5kbGVyLCBPbk1lc3NhZ2VSZWNlaXZlZCB9IGZyb20gJy4uL2hhbmRsZXJzL01lc3NhZ2UuaGFuZGxlcic7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc29yIH0gZnJvbSAnLi4vdXRpbHMvUG9zdFByb2Nlc3Nvcic7XG5pbXBvcnQgeyBHZW5lcmljTWVzc2FnZSwgQXV0aG9yIH0gZnJvbSAnLi9DaGFubmVsRGF0YSc7XG5pbXBvcnQgeyBQcml2bXNnRGF0YSB9IGZyb20gJy4vUHJpdm1zZ0RhdGEnO1xuaW1wb3J0IHsgVXNlckluZm9TZXJ2aWNlIH0gZnJvbSAnLi91c2VyLWluZm8uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFByaXZtc2dTZXJ2aWNlIGltcGxlbWVudHMgT25NZXNzYWdlUmVjZWl2ZWQge1xuXG4gIHB1YmxpYyByZWFkb25seSBtZXNzYWdlc1JlY2VpdmVkOiBFdmVudEVtaXR0ZXI8R2VuZXJpY01lc3NhZ2U+ID0gbmV3IEV2ZW50RW1pdHRlcjxHZW5lcmljTWVzc2FnZT4oKTtcbiAgcHVibGljIHJlYWRvbmx5IG5ld1ByaXZPcGVuZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIHB1YmxpYyByZWFkb25seSBjbG9zZWRQcml2OiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBwdWJsaWMgcHJpdk1zZ3M6IHsgW2tleTogc3RyaW5nXTogUHJpdm1zZ0RhdGEgfSA9IHt9O1xuXG4gIHB1YmxpYyBoaXN0b3J5OiB7IFtrZXk6IHN0cmluZ106IEdlbmVyaWNNZXNzYWdlW10gfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJTcnY6IFVzZXJJbmZvU2VydmljZSkge1xuICAgIE1lc3NhZ2VIYW5kbGVyLnNldEhhbmRsZXIodGhpcyk7XG4gICAgdGhpcy5oaXN0b3J5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHZfaGlzdG9yeScpKTtcbiAgICBpZighdGhpcy5oaXN0b3J5KSB7XG4gICAgICB0aGlzLmhpc3RvcnkgPSB7fTtcbiAgICB9XG4gIH1cblxuICBvbk1lc3NhZ2VSZWNlaXZlZChtZXNzYWdlOiBJbmRpdmlkdWFsTWVzc2FnZSkge1xuICAgIGlmKG1lc3NhZ2UubWVzc2FnZVR5cGUgPT0gSW5kaXZpZHVhbE1lc3NhZ2VUeXBlcy5QUklWTVNHKSB7XG4gICAgICBjb25zdCBtc2dBdXRob3IgPSBtZXNzYWdlLnByaXZhdGVBdXRob3IgPyBtZXNzYWdlLnByaXZhdGVBdXRob3IgOiBtZXNzYWdlLmF1dGhvcjtcbiAgICAgIGNvbnN0IG1zZzogR2VuZXJpY01lc3NhZ2UgPSB7XG4gICAgICAgIG1lc3NhZ2U6IChtZXNzYWdlLm1lc3NhZ2UgYXMgc3RyaW5nKSxcbiAgICAgICAgbWVzc2FnZVdpdGhNZXRhZGF0YTogIFBvc3RQcm9jZXNzb3IucHJvY2Vzc01lc3NhZ2UobWVzc2FnZS5tZXNzYWdlIGFzIHN0cmluZywgbXNnQXV0aG9yLCB0aGlzLnVzZXJTcnYuZ2V0TmljaygpKSxcbiAgICAgICAgYXV0aG9yOiBuZXcgQXV0aG9yPHN0cmluZz4obXNnQXV0aG9yKSxcbiAgICAgICAgZGF0ZTogbWVzc2FnZS5kYXRlICsgJyAnICsgbWVzc2FnZS50aW1lLFxuICAgICAgICBzcGVjaWFsOiBtZXNzYWdlLm1lQWN0aW9uLFxuICAgICAgICB0YXJnZXQ6IG1lc3NhZ2UuY2hhbm5lbFxuICAgICAgfTtcbiAgICAgIGlmKHRoaXMucHJpdk1zZ3NbbWVzc2FnZS5hdXRob3JdKSB7XG4gICAgICAgIHRoaXMucHJpdk1zZ3NbbWVzc2FnZS5hdXRob3JdLm1lc3NhZ2VzLnB1c2gobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmV3UHJpdk9wZW5lZC5lbWl0KG1lc3NhZ2UuYXV0aG9yKTtcbiAgICAgICAgdGhpcy5wcml2TXNnc1ttZXNzYWdlLmF1dGhvcl0gPSBuZXcgUHJpdm1zZ0RhdGEoKTtcbiAgICAgICAgdGhpcy5wcml2TXNnc1ttZXNzYWdlLmF1dGhvcl0udXNlciA9IG1lc3NhZ2UuYXV0aG9yO1xuICAgICAgICB0aGlzLnByaXZNc2dzW21lc3NhZ2UuYXV0aG9yXS5tZXNzYWdlcy5wdXNoKG1zZyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1lc3NhZ2VzUmVjZWl2ZWQuZW1pdChtc2cpO1xuICAgICAgdGhpcy5zYXZlSGlzdG9yeShtZXNzYWdlLmF1dGhvciwgbXNnKTtcblxuICAgIH1cbiAgfVxuXG4gIHNhdmVIaXN0b3J5KGF1dGhvcjogc3RyaW5nLCBtc2c6IEdlbmVyaWNNZXNzYWdlKSB7XG4gICAgaWYgKCF0aGlzLmhpc3RvcnlbYXV0aG9yXSkge1xuICAgICAgdGhpcy5oaXN0b3J5W2F1dGhvcl0gPSBbXTtcbiAgICB9XG4gICAgY29uc3QgbXNDID0gT2JqZWN0LmFzc2lnbih7fSwgbXNnKTtcbiAgICBtc0MuZnJvbUhpc3RvcnkgPSB0cnVlO1xuICAgIHRoaXMuaGlzdG9yeVthdXRob3JdLnB1c2gobXNDKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHZfaGlzdG9yeScsIEpTT04uc3RyaW5naWZ5KHRoaXMuaGlzdG9yeSkpO1xuICB9XG5cbiAgZ2V0SGlzdG9yeShhdXRob3I6IHN0cmluZyk6IEdlbmVyaWNNZXNzYWdlW10ge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbYXV0aG9yXTtcbiAgfVxuXG4gIGdldFByaXZhdGUobmljazogc3RyaW5nKTogUHJpdm1zZ0RhdGEge1xuICAgIGlmKCF0aGlzLnByaXZNc2dzW25pY2tdKSB7XG4gICAgICB0aGlzLnByaXZNc2dzW25pY2tdID0gbmV3IFByaXZtc2dEYXRhKCk7XG4gICAgICB0aGlzLnByaXZNc2dzW25pY2tdLnVzZXIgPSBuaWNrO1xuICAgICAgdGhpcy5uZXdQcml2T3BlbmVkLmVtaXQobmljayk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByaXZNc2dzW25pY2tdO1xuICB9XG5cbiAgY2xvc2VQcml2YXRlKG5pY2s6IHN0cmluZykge1xuICAgIGRlbGV0ZSB0aGlzLnByaXZNc2dzW25pY2tdO1xuICAgIHRoaXMuY2xvc2VkUHJpdi5lbWl0KG5pY2spO1xuICB9XG5cbn1cbiJdfQ==