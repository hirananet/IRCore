import { webSocket } from 'rxjs/webSocket';
import { Subject } from 'rxjs';
import { EventEmitter } from '@angular/core';
export class WebSocketUtil {
    constructor() {
        this.onOpenSubject = new Subject();
        this.onCloseSubject = new Subject();
    }
    connect(url, uuid) {
        this.wss = webSocket({
            url,
            serializer: msg => msg,
            deserializer: msg => msg.data,
            openObserver: this.onOpenSubject,
            closeObserver: this.onCloseSubject
        });
        const obs = this.wss.asObservable();
        obs.subscribe(msg => {
            WebSocketUtil.messageReceived.emit(new MessageData(uuid, msg));
        }, err => {
            const status = new ConnectionStatusData();
            status.status = ConnectionStatus.ERROR;
            status.data = { uuid, err };
            console.error('WS errror?', status.data);
            WebSocketUtil.statusChanged.emit(status);
            WebSocketUtil.connected = false;
        });
        this.onCloseSubject.subscribe(() => {
            const status = new ConnectionStatusData();
            status.status = ConnectionStatus.DISCONNECTED;
            status.data = uuid;
            WebSocketUtil.statusChanged.emit(status);
            WebSocketUtil.connected = false;
        });
        this.onOpenSubject.subscribe(() => {
            const status = new ConnectionStatusData();
            status.status = ConnectionStatus.CONNECTED;
            status.data = uuid;
            WebSocketUtil.statusChanged.emit(status);
            WebSocketUtil.connected = true;
        });
        return obs;
    }
    send(msg) {
        this.wss.next(msg);
    }
    disconnect() {
        this.wss.complete();
    }
    static isConnected() {
        return WebSocketUtil.connected;
    }
}
WebSocketUtil.messageReceived = new EventEmitter();
WebSocketUtil.statusChanged = new EventEmitter();
WebSocketUtil.connected = false;
export class ConnectionStatusData {
}
export var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus[ConnectionStatus["CONNECTED"] = 0] = "CONNECTED";
    ConnectionStatus[ConnectionStatus["DISCONNECTED"] = 1] = "DISCONNECTED";
    ConnectionStatus[ConnectionStatus["ERROR"] = 2] = "ERROR";
})(ConnectionStatus || (ConnectionStatus = {}));
export class MessageData {
    constructor(uuid, message) {
        this.uuid = uuid;
        this.message = message;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0LnV0aWwuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvYWxleGEvZ2l0L0lSQ29yZS9wcm9qZWN0cy9pcmNvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL1dlYlNvY2tldC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0QsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE1BQU0sT0FBTyxhQUFhO0lBQTFCO1FBTW1CLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM5QixtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFxRGxELENBQUM7SUFqREMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFZO1FBQzdCLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFTO1lBQzNCLEdBQUc7WUFDSCxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHO1lBQ3RCLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQzdCLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNoQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsRUFDRCxHQUFHLENBQUMsRUFBRTtZQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksb0JBQW9CLEVBQU8sQ0FBQztZQUMvQyxNQUFNLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztZQUN2QyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDO1lBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6QyxhQUFhLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLG9CQUFvQixFQUFVLENBQUM7WUFDbEQsTUFBTSxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7WUFDOUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbkIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxvQkFBb0IsRUFBVSxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ25CLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQVc7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFVBQVU7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVztRQUN2QixPQUFPLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDakMsQ0FBQzs7QUF4RHNCLDZCQUFlLEdBQUcsSUFBSSxZQUFZLEVBQWUsQ0FBQztBQUNsRCwyQkFBYSxHQUFHLElBQUksWUFBWSxFQUE2QixDQUFDO0FBTXRFLHVCQUFTLEdBQVksS0FBSyxDQUFDO0FBcUQ1QyxNQUFNLE9BQU8sb0JBQW9CO0NBR2hDO0FBRUQsTUFBTSxDQUFOLElBQVksZ0JBSVg7QUFKRCxXQUFZLGdCQUFnQjtJQUMxQixpRUFBUyxDQUFBO0lBQ1QsdUVBQVksQ0FBQTtJQUNaLHlEQUFLLENBQUE7QUFDUCxDQUFDLEVBSlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUkzQjtBQUVELE1BQU0sT0FBTyxXQUFXO0lBR3RCLFlBQVksSUFBWSxFQUFFLE9BQWU7UUFDdkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt3ZWJTb2NrZXQsIFdlYlNvY2tldFN1YmplY3R9IGZyb20gJ3J4anMvd2ViU29ja2V0JztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgV2ViU29ja2V0VXRpbCB7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBtZXNzYWdlUmVjZWl2ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPE1lc3NhZ2VEYXRhPigpO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHN0YXR1c0NoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPENvbm5lY3Rpb25TdGF0dXNEYXRhPGFueT4+KCk7XG5cbiAgcHJpdmF0ZSB3c3M6IFdlYlNvY2tldFN1YmplY3Q8c3RyaW5nPjtcbiAgcHJpdmF0ZSByZWFkb25seSBvbk9wZW5TdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBvbkNsb3NlU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY29ubmVjdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29ubmVjdCh1cmw6IHN0cmluZywgdXVpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgIHRoaXMud3NzID0gd2ViU29ja2V0PHN0cmluZz4oe1xuICAgICAgICB1cmwsXG4gICAgICAgIHNlcmlhbGl6ZXI6IG1zZyA9PiBtc2csXG4gICAgICAgIGRlc2VyaWFsaXplcjogbXNnID0+IG1zZy5kYXRhLFxuICAgICAgICBvcGVuT2JzZXJ2ZXI6IHRoaXMub25PcGVuU3ViamVjdCxcbiAgICAgICAgY2xvc2VPYnNlcnZlcjogdGhpcy5vbkNsb3NlU3ViamVjdFxuICAgICAgfSk7XG4gICAgICBjb25zdCBvYnMgPSB0aGlzLndzcy5hc09ic2VydmFibGUoKTtcbiAgICAgIG9icy5zdWJzY3JpYmUobXNnID0+IHtcbiAgICAgICAgV2ViU29ja2V0VXRpbC5tZXNzYWdlUmVjZWl2ZWQuZW1pdChuZXcgTWVzc2FnZURhdGEodXVpZCwgbXNnKSk7XG4gICAgICB9LFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IENvbm5lY3Rpb25TdGF0dXNEYXRhPGFueT4oKTtcbiAgICAgICAgc3RhdHVzLnN0YXR1cyA9IENvbm5lY3Rpb25TdGF0dXMuRVJST1I7XG4gICAgICAgIHN0YXR1cy5kYXRhID0ge3V1aWQsIGVycn07XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dTIGVycnJvcj8nLCBzdGF0dXMuZGF0YSk7XG4gICAgICAgIFdlYlNvY2tldFV0aWwuc3RhdHVzQ2hhbmdlZC5lbWl0KHN0YXR1cyk7XG4gICAgICAgIFdlYlNvY2tldFV0aWwuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub25DbG9zZVN1YmplY3Quc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IENvbm5lY3Rpb25TdGF0dXNEYXRhPHN0cmluZz4oKTtcbiAgICAgICAgc3RhdHVzLnN0YXR1cyA9IENvbm5lY3Rpb25TdGF0dXMuRElTQ09OTkVDVEVEO1xuICAgICAgICBzdGF0dXMuZGF0YSA9IHV1aWQ7XG4gICAgICAgIFdlYlNvY2tldFV0aWwuc3RhdHVzQ2hhbmdlZC5lbWl0KHN0YXR1cyk7XG4gICAgICAgIFdlYlNvY2tldFV0aWwuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHRoaXMub25PcGVuU3ViamVjdC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgQ29ubmVjdGlvblN0YXR1c0RhdGE8c3RyaW5nPigpO1xuICAgICAgICBzdGF0dXMuc3RhdHVzID0gQ29ubmVjdGlvblN0YXR1cy5DT05ORUNURUQ7XG4gICAgICAgIHN0YXR1cy5kYXRhID0gdXVpZDtcbiAgICAgICAgV2ViU29ja2V0VXRpbC5zdGF0dXNDaGFuZ2VkLmVtaXQoc3RhdHVzKTtcbiAgICAgICAgV2ViU29ja2V0VXRpbC5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JzO1xuICB9XG5cbiAgcHVibGljIHNlbmQobXNnOiBzdHJpbmcpIHtcbiAgICAgIHRoaXMud3NzLm5leHQobXNnKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMud3NzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGlzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiBXZWJTb2NrZXRVdGlsLmNvbm5lY3RlZDtcbiAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uU3RhdHVzRGF0YTx0PiB7XG4gIHN0YXR1czogQ29ubmVjdGlvblN0YXR1cztcbiAgZGF0YTogdDtcbn1cblxuZXhwb3J0IGVudW0gQ29ubmVjdGlvblN0YXR1cyB7XG4gIENPTk5FQ1RFRCxcbiAgRElTQ09OTkVDVEVELFxuICBFUlJPUlxufVxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZURhdGEge1xuICB1dWlkOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY29uc3RydWN0b3IodXVpZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnV1aWQgPSB1dWlkO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cbn1cbiJdfQ==