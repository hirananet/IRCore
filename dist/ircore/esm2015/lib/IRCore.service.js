import { WebSocketUtil } from './utils/WebSocket.util';
import { Injectable } from '@angular/core';
import { IRCParserV2 } from './IRCParserV2';
import { UserInfoService } from './services/user-info.service';
import { IndividualMessage, IndividualMessageTypes } from './dto/IndividualMessage';
import { Time } from './utils/Time.util';
import { MessageHandler } from './handlers/Message.handler';
import * as i0 from "@angular/core";
import * as i1 from "./services/user-info.service";
export class IRCoreService {
    constructor(userSrv) {
        this.userSrv = userSrv;
        WebSocketUtil.messageReceived.subscribe((message) => {
            if (message.message.indexOf('PING') === 0) {
                const pingResp = message.message.slice(5);
                this.sendRaw('PONG ' + pingResp);
                return;
            }
            if (message.message.indexOf('ERROR') === 0) {
                console.error('Received error from stream: ', message.message);
                return;
            }
            IRCParserV2.parseMessage(message.message).forEach(msg => {
                IRCParserV2.processMessage(msg, message.message, this.userSrv.getNick());
            });
        });
    }
    connect(url) {
        this.webSocket = new WebSocketUtil();
        this.webSocket.connect(url, 'WSocket');
    }
    handshake(username, apodo, gatwayHost) {
        this.sendRaw('ENCODING UTF-8');
        if (gatwayHost) {
            this.sendRaw('HOST ' + gatwayHost);
        }
        this.sendRaw('USER ' + username + ' * * :' + IRCoreService.clientName);
        this.setNick(apodo);
    }
    identify(password) {
        this.sendRaw('PRIVMSG NickServ identify ' + password);
    }
    serverPass(user, password) {
        this.sendRaw('PASS ' + user + ':' + password);
    }
    setNick(nick) {
        this.sendRaw('NICK ' + nick);
        this.userSrv.setNick(nick);
    }
    sendWhox(channel) {
        channel = channel[0] === '#' ? channel : '#' + channel;
        this.sendRaw('WHO ' + channel);
    }
    join(channel) {
        if (channel[0] != '#') {
            channel = '#' + channel;
        }
        this.sendRaw('JOIN ' + channel);
    }
    disconnect() {
        this.webSocket.disconnect();
    }
    sendRaw(rawMessage) {
        this.webSocket.send(rawMessage);
    }
    sendMessageOrCommand(command, target) {
        if (command[0] === '/') {
            let cmd = command.slice(1);
            const verb = cmd.split(' ')[0].toLowerCase();
            if (verb === 'query') {
                cmd = cmd.slice(5).trim();
                // TODO: query a cmd
            }
            if (verb === 'join') {
                // enviar cmd esto es un join
                this.sendRaw(cmd);
                return false;
            }
            if (verb === 'umode') {
                // enviar cmd esto es un join
                cmd = cmd.replace('umode', 'mode ' + this.userSrv.getNick());
            }
            if (verb === 'stop') {
                // enviar cmd esto es un join
                stopEff();
                return false;
            }
            if (verb === 'me') {
                cmd = cmd.slice(2).trim();
                this.sendRaw('PRIVMSG ' + target + ' :' + String.fromCharCode(1) + 'ACTION ' + cmd + String.fromCharCode(1));
                this._triggerMessage(cmd, target, true);
                return true;
            }
            if (verb === 'cs') {
                // chanserv?
                cmd = cmd.replace('cs', 'PRIVMSG ChanServ :');
            }
            if (verb === 'hc') {
                // chanserv?
                cmd = cmd.replace('hc', 'PRIVMSG HiraClient :');
            }
            if (verb === 'ns') {
                // nickserv?
                cmd = cmd.replace('ns', 'PRIVMSG NickServ :');
            }
            if (verb === 'msg') {
                cmd = cmd.replace('msg', 'PRIVMSG');
            }
            if (verb === 'leave') {
                cmd = cmd.replace('leave', 'PART');
            }
            if (verb === 'away') {
                if (cmd.length === 4) {
                    const now = new Date();
                    cmd += ' AFK desde ' + now.getDay() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear() + ' ' +
                        now.getHours() + ':' + now.getMinutes();
                }
            }
            if (verb === 'back') {
                cmd = cmd.replace('back', 'away');
            }
            this.sendRaw(cmd);
            return false;
        }
        else {
            if (target) {
                this.sendRaw('PRIVMSG ' + target + ' :' + command);
                this._triggerMessage(command, target, false);
            }
            else {
                this.sendRaw(command);
            }
            return true;
        }
    }
    _triggerMessage(command, target, isMe) {
        const iMessage = new IndividualMessage();
        iMessage.author = this.userSrv.getNick();
        iMessage.message = command;
        iMessage.meAction = isMe;
        iMessage.date = Time.getDateStr();
        iMessage.time = Time.getTime();
        iMessage.messageType = target[0] == '#' ? IndividualMessageTypes.CHANMSG : IndividualMessageTypes.PRIVMSG;
        if (iMessage.messageType === IndividualMessageTypes.CHANMSG) {
            iMessage.channel = target;
        }
        else {
            iMessage.privateAuthor = iMessage.author;
            iMessage.author = target;
        }
        MessageHandler.onMessage(iMessage);
    }
    getWS() {
        return this.webSocket;
    }
}
IRCoreService.clientName = 'IRCoreV2';
IRCoreService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IRCoreService_Factory() { return new IRCoreService(i0.ɵɵinject(i1.UserInfoService)); }, token: IRCoreService, providedIn: "root" });
IRCoreService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IRCoreService.ctorParameters = () => [
    { type: UserInfoService }
];
//# sourceMappingURL=data:application/json;base64,