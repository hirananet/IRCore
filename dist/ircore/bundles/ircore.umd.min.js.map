{"version":3,"sources":["../../../projects/ircore/src/lib/dto/Join.ts","../../../projects/ircore/src/lib/handlers/Part.handler.ts","../../../projects/ircore/src/lib/dto/KickInfo.ts","../../../projects/ircore/src/lib/handlers/Kick.handler.ts","../../../projects/ircore/src/lib/utils/UModes.utils.ts","../../../projects/ircore/src/lib/dto/Away.ts","../../../projects/ircore/src/lib/dto/NewMode.ts","../../../projects/ircore/src/lib/handlers/Gmode.handler.ts","../../../projects/ircore/src/lib/dto/Channel.ts","../../../projects/ircore/src/lib/handlers/ChannelList.handler.ts","../../../projects/ircore/src/lib/dto/WhoIs.ts","../../../projects/ircore/src/lib/handlers/Whois.handler.ts","../../../projects/ircore/src/lib/handlers/Who.handler.ts","../../../projects/ircore/src/lib/dto/Who.ts","../../../projects/ircore/src/lib/handlers/Users.handler.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ircore/src/lib/dto/User.ts","../../../projects/ircore/src/lib/dto/UserInChannel.ts","../../../projects/ircore/src/lib/handlers/List.handler.ts","../../../projects/ircore/src/lib/dto/ChannelInfo.ts","../../../projects/ircore/src/lib/handlers/Status.handler.ts","../../../projects/ircore/src/lib/dto/NickChange.ts","../../../projects/ircore/src/lib/utils/IRCMessage.util.ts","../../../projects/ircore/src/lib/utils/validRegex.ts","../../../projects/ircore/src/lib/handlers/Mode.handler.ts","../../../projects/ircore/src/lib/handlers/Away.handler.ts","../../../projects/ircore/src/lib/handlers/Ignore.Handler.ts","../../../projects/ircore/src/lib/handlers/Motd.handler.ts","../../../projects/ircore/src/lib/handlers/ChannelStatus.handler.ts","../../../projects/ircore/src/lib/dto/Part.ts","../../../projects/ircore/src/lib/handlers/Quit.handler.ts","../../../projects/ircore/src/lib/dto/Quit.ts","../../../projects/ircore/src/lib/handlers/Join.handler.ts","../../../projects/ircore/src/lib/handlers/Server.handler.ts","../../../projects/ircore/src/lib/handlers/Message.handler.ts","../../../projects/ircore/src/lib/dto/IndividualMessage.ts","../../../projects/ircore/src/lib/utils/Time.util.ts","../../../projects/ircore/src/lib/handlers/Moderated.handler.ts","../../../projects/ircore/src/lib/IRCParserV2.ts","../../../projects/ircore/src/lib/ircore.module.ts","../../../projects/ircore/src/lib/utils/WebSocket.util.ts","../../../projects/ircore/src/lib/services/user-info.service.ts","../../../projects/ircore/src/lib/IRCore.service.ts","../../../projects/ircore/src/lib/helpers/avatar.helper.ts","../../../projects/ircore/src/lib/services/ChannelData.ts","../../../projects/ircore/src/lib/utils/EmoteList.ts","../../../projects/ircore/src/lib/utils/PostProcessor.ts","../../../projects/ircore/src/lib/services/channels.service.ts","../../../projects/ircore/src/lib/services/PrivmsgData.ts","../../../projects/ircore/src/lib/services/privmsg.service.ts","../../../projects/ircore/src/lib/services/server-msg.service.ts","../../../projects/ircore/src/lib/services/who-status.service.ts"],"names":["PartHandler","onPart","part","this","partResponse","emit","setHandler","hdlr","subscribe","data","EventEmitter","KickHandler","kickParse","rawMessage","exec","onKick","kick","kicked","UModes","GmodeHandler","privateRequest","user","onPrivateRequest","channel","mode","FOUNDER","substr","ADMIN","OPER","HALFOPER","VOICE","name","ChannelListHandler","setChannelList","channelList","uChannelList","channelListUpdated","UpdateChannelList","getChannels","onChannelList","channels","WhoIsData","isGOP","isSecured","prototype","getLastLogin","date","Date","parseInt","lastLogin","hs","getHours","mins","getMinutes","day","getDate","month","getMonth","getFullYear","getIdle","out","idle","secs","Math","floor","WhoIsHandler","addWhoisPartial","field","whoisdatas","username","finalWhoisMessage","onWhoisResponse","getWhoisResponses","WhoHandler","addWhoData","usersWho","isAway","isNetOp","nick","rawMsg","serverFrom","onWhoResponse","getWhoData","WHOUserParser","message","UsersHandler","addUsersToChannel","users","usersInChannel","usersInChannelResponse","ChannelAndUserList","getChannelOfMessage","messages","length","trim","console","error","getUsersInChannel","onUserList","userList","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","create","UserInChannel","_this","_super","Channel","TypeError","String","__","constructor","__extends","User","ListHandler","addChannels","push","newChannelList","channelListCreated","getChannelList","description","flags","StatusHandler","onNickAlreadyInUse","nickInUse","nickAlreadyInUse","onBanned","banned","onNickChanged","nickChanged","setHandlerNickAlreadyInUse","setHandlerBanned","setHandlerNickChanged","old","nnick","oldNick","newNick","ValidRegex","channelRegex","userRegex","actionRegex","modeRegex","getRegex","regex","RegExp","pingRegex","replace","ModeHandler","modeParser","modeRaw","split","indexOf","modeCut","undefined","regOut","changeMode","modeChange","AwayHandler","onAway","away","awayResponse","IgnoreHandler","onIgnore","ignore","ignoreResponse","MotdHandler","motdResponse","requirePasswordResponse","ChannelStatusHandler","setChannelTopic","topic","channelsTopics","channelTopicResponse","ChannelTopicUpdate","getChannelTopic","findChannels","slice","onTopicUpdate","newTopic","QuitHandler","onQuit","quit","quitResponse","JoinHandler","onJoin","join","joinResponse","ServerHandler","onServerResponse","msg","serverResponse","onServerNoticeResponse","serverNoticeResponse","MessageHandler","onMessage","messageResponse","getMeAction","parsedMessage","onMessageReceived","IndividualMessageTypes","Time","getTime","now","getSeconds","getDateStr","monthStr","ModeratedHandler","channelModerated","IRCParserV2","parseMessage","forEach","msgLine","r","TAG","MSG","partials","im","IRCMessage","body","tag","code","target","od","OriginData","server","identitity","simplyOrigin","origin","processMessage","actualNick","chnlList_1","pmChnl","chnl","Away","author","IndividualMessage","messageType","NOTIFY","meAction","time","kickData","kickInfo","KickInfo","operator","userTarget","Part","Quit","Join","meMsg","PRIVMSG","CHANMSG","mention","nmode","NewMode","channelTarget","modeAdded","NickChange","ChannelInfo","channel_1","usersInChannel_1","chnlObj","whoData","Who","mod","modes","NgModule","args","declarations","imports","exports","WebSocketUtil","onOpenSubject","Subject","onCloseSubject","connect","url","uuid","wss","webSocket","serializer","deserializer","openObserver","closeObserver","obs","asObservable","messageReceived","MessageData","err","status","ConnectionStatusData","ConnectionStatus","ERROR","statusChanged","connected","DISCONNECTED","CONNECTED","send","next","disconnect","complete","isConnected","UserInfoService","onChangeNick","getNick","setNick","Injectable","providedIn","IRCoreService","userSrv","pingResp","sendRaw","handshake","apodo","gatwayHost","clientName","identify","password","serverPass","sendWhox","sendMessageOrCommand","command","cmd","verb","toLowerCase","stopEff","fromCharCode","_triggerMessage","getDay","isMe","iMessage","privateAuthor","getWS","AvatarHelper","setAvatarURL","avatarURL","getAvatarURL","imageURL","image","EmoteList","getMeme","memes","findIndex","meme","memesLocation","memesExtension","getFace","faces","facesLocation","facesExtension","specialFaces","specialLocation","startEventEffect","startEventEffectPrimavera","startEventEffectVerano","startEventEffectOtono","startEventEffectCabritas","startEventEffectRegalo","startEventEffectMeteor","startEventEffectKz2s","Gabriela-","Polsaker","UserStatuses","PostProcessor","me","mwm","MessageWithMetadata","youtubeLink","youtube","imageLink","otherLink","link","quote","originalMessage","temp","document","createElement","textContent","innerHTML","match","face","realName","realLocation","processPings","result","deconverHTML","matchs","processUserMetadata","UserWithMetadata","NET_OPERATOR","OPERATOR","HALF_OPERATOR","ChannelsService","listChanged","messagesReceived","membersChanged","substring","channelObj","find","sendSpecialMSG","action","channel_2","history","JSON","parse","localStorage","getItem","saveHistory","msC","assign","fromHistory","setItem","stringify","getHistory","actualChnls_1","addChannel","idx","chName","splice","nChannel","ChannelData","actualUsers","currentUser","oldUser","newUser","acu","special","notify","chan","usr","getChannel","chanObj","tgtChan_1","messageWithMetadata","Author","PrivmsgService","newPrivOpened","closedPriv","privMsgs","msgAuthor","PrivmsgData","getPrivate","closePrivate","newMessage","WhoStatusService","whoStatus","dW"],"mappings":"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","sourcesContent":["import { User } from './User';\nimport { OriginData } from '../utils/IRCMessage.util';\nimport { Channel } from './Channel';\n\nexport class Join {\n  public origin: OriginData;\n  public user: User;\n  public channel: Channel;\n}\n","import { Part } from './../dto/Part';\nimport { EventEmitter } from '@angular/core';\n\n// @dynamic\nexport class PartHandler {\n  public static readonly partResponse: EventEmitter<Part> = new EventEmitter<Part>();\n\n  public static onPart(part: Part) {\n    this.partResponse.emit(part);\n  }\n\n  public static setHandler(hdlr: OnPart) {\n    this.partResponse.subscribe(data => {\n      hdlr.onPart(data);\n    });\n  }\n}\n\nexport interface OnPart {\n  onPart(data: Part);\n}\n","import { Channel } from './Channel';\nimport { User } from './User';\nexport class KickInfo {\n  public channel: Channel;\n  public operator: string;\n  public userTarget: User;\n}\n","import { EventEmitter } from '@angular/core';\nimport { KickInfo } from '../dto/KickInfo';\n\n// @dynamic\nexport class KickHandler {\n\n  public static readonly kicked: EventEmitter<KickInfo> = new EventEmitter<KickInfo>();\n\n  public static kickParse(rawMessage: string): string[] {\n    return /#([^\\s]+)\\s([^:]+)\\s/.exec(rawMessage);\n  }\n\n  public static onKick(kick: KickInfo) {\n    this.kicked.emit(kick);\n  }\n\n  public static setHandler(hdlr: OnKick) {\n    this.kicked.subscribe(data => {\n      hdlr.onKick(data);\n    });\n  }\n}\n\nexport interface OnKick {\n  onKick(data: KickInfo);\n}\n","export enum UModes {\n  FOUNDER,\n  ADMIN,\n  OPER,\n  HALFOPER,\n  VOICE,\n  BANNED\n}\n","export class Away {\n  public author: string;\n  public message: string;\n}\n","import { User } from './User';\n\nexport class NewMode {\n  userTarget: User;\n  channelTarget: string;\n  modeAdded: boolean;\n  mode: string;\n}\n","import { EventEmitter } from '@angular/core';\n\n/*\n  Clase para manejar los request en +g\n*/\n// @dynamic\nexport class GmodeHandler {\n\n  public static readonly onPrivateRequest: EventEmitter<string> = new EventEmitter<string>();\n\n  public static privateRequest(user: string) {\n    GmodeHandler.onPrivateRequest.emit(user);\n  }\n\n}\n","import { UModes } from '../utils/UModes.utils';\n\nexport class Channel {\n  channel: string;\n  name: string;\n  mode: UModes;\n\n  constructor(channel: string) {\n    if (channel[0] === '~') {\n      this.mode = UModes.FOUNDER;\n      channel = channel.substr(1);\n    } else if (channel[0] === '&') {\n      this.mode = UModes.ADMIN;\n      channel = channel.substr(1);\n    } else if (channel[0] === '@') {\n      this.mode = UModes.OPER;\n      channel = channel.substr(1);\n    } else if (channel[0] === '%') {\n      this.mode = UModes.HALFOPER;\n      channel = channel.substr(1);\n    } else if (channel[0] === '+') {\n      this.mode = UModes.VOICE;\n      channel = channel.substr(1);\n    }\n    if (channel[0] === '#') {\n      this.channel = channel;\n      this.name = channel.substr(1);\n    } else {\n      this.channel = '#' + channel;\n      this.name = channel;\n    }\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { Channel } from '../dto/Channel';\n\n/*\n  Clase para manejar los canales que tiene un usuario.\n  Lista de canales que trae el whois de un usuario o el mensaje inicial\n*/\n// @dynamic\nexport class ChannelListHandler {\n\n  private static uChannelList: UserChannelList = {};\n  public static readonly channelListUpdated: EventEmitter<UpdateChannelList> = new EventEmitter<UpdateChannelList>();\n\n  public static setChannelList(user: string, channelList: Channel[]) {\n    // FIXME: update the same instance.\n    this.uChannelList[user] = channelList;\n    this.channelListUpdated.emit(new UpdateChannelList(user, channelList));\n  }\n\n  public static getChannels(): UserChannelList {\n    return this.uChannelList;\n  }\n\n  public static setHandler(hdlr: OnChannelList) {\n    this.channelListUpdated.subscribe(data => {\n      hdlr.onChannelList(data.user, data.channels);\n    });\n  }\n\n}\n\nexport class UserChannelList {\n  [key: string]: Channel[];\n}\n\nexport class UpdateChannelList {\n  user: string;\n  channels: Channel[] = [];\n  constructor(user: string, channels: Channel[]) {\n    this.user = user;\n    this.channels = channels;\n  }\n}\n\nexport interface OnChannelList {\n  onChannelList(user: string, channels: Channel[]);\n}\n","import { Channel } from './Channel';\n\nexport class WhoIsData {\n\n  public username: string;\n  public connectedFrom?: string;\n  public server?: string;\n  public isGOP = false;\n  public modes: string;\n  public userAccount: string;\n  public isSecured = false;\n  public idle: number;\n  public lastLogin: string;\n  public channelList: Channel[];\n\n  public getLastLogin(): string {\n    const date = new Date(parseInt(this.lastLogin, 10) * 1000);\n    let hs: any = date.getHours();\n    if(hs < 10) {\n      hs = '0' + hs;\n    }\n    let mins: any = date.getMinutes();\n    if(mins < 10) {\n      mins = '0' + mins;\n    }\n    let day: any = date.getDate();\n    if(day < 10) {\n      day = '0'+day;\n    }\n    let month: any = (date.getMonth() + 1);\n    if(month < 10) {\n      month = '0'+month;\n    }\n    return day + '/' + month + '/' + date.getFullYear() + ' ' + hs + ':' + mins;\n  }\n\n  public getIdle(): string {\n    let out = '';\n    let idle = this.idle;\n    if (idle >= 60) {\n      let secs: any = (this.idle % 60);\n      if(secs < 10) {\n        secs = '0' + secs;\n      }\n      out = secs + 's';\n      idle = Math.floor(idle / 60);\n    } else {\n      return this.idle + 's';\n    }\n    if (idle >= 60) {\n      let mins: any = (idle % 60);\n      if(mins < 10) {\n        mins = '0' + mins;\n      }\n      out = mins + 'm ' + out;\n      idle = Math.floor(idle / 60);\n    } else {\n      return idle + 'm ' + out;\n    }\n    if (idle >= 24) {\n      let hs: any = (idle % 24);\n      if(hs < 10) {\n        hs = '0' + hs;\n      }\n      out = hs + 'h ' + out;\n      idle = Math.floor(idle / 24);\n    } else {\n      return idle + 'h ' + out;\n    }\n    return idle + 'd ' + out;\n  }\n\n}\n","import { EventEmitter } from '@angular/core';\nimport { WhoIsData } from '../dto/WhoIs';\n\n/*\n  Clase para manejar el Whois de un usuario.\n*/\n// @dynamic\nexport class WhoIsHandler {\n\n  private static whoisdatas: WhoDatas = {};\n  public static readonly onWhoisResponse: EventEmitter<WhoIsData> = new EventEmitter<WhoIsData>();\n\n  public static addWhoisPartial(user: string, field: string, data: any) {\n    if (!this.whoisdatas[user]) {\n      this.whoisdatas[user] = new WhoIsData();\n      this.whoisdatas[user].username = user;\n    }\n    this.whoisdatas[user][field] = data;\n  }\n\n  public static finalWhoisMessage(user: string) {\n    this.onWhoisResponse.emit(this.whoisdatas[user]);\n  }\n\n  public static getWhoisResponses() {\n    return this.whoisdatas;\n  }\n\n}\n\nexport class WhoDatas {\n  [key: string]: WhoIsData;\n}\n","import { EventEmitter } from '@angular/core';\nimport { Who } from './../dto/Who';\n\n/*\n  Clase para manejar el estado de los usuarios (si está away, es netop, de donde se conecta, etc.)\n*/\n// @dynamic\nexport class WhoHandler {\n\n  public static readonly usersWho: UsersWhos = {};\n  public static readonly onWhoResponse: EventEmitter<Who> = new EventEmitter<Who>();\n\n  public static addWhoData(user: string, data: Who) {\n    if (!this.usersWho[user]) {\n      this.usersWho[user] = data;\n    } else {\n      this.usersWho[user].isAway = data.isAway;\n      this.usersWho[user].isNetOp = data.isNetOp;\n      this.usersWho[user].mode = data.mode;\n      this.usersWho[user].nick = data.nick;\n      this.usersWho[user].rawMsg = data.rawMsg;\n      this.usersWho[user].serverFrom = data.serverFrom;\n    }\n    this.onWhoResponse.emit(this.usersWho[user]);\n  }\n\n  public static getWhoData(user: string): Who {\n    return this.usersWho[user];\n  }\n\n  public static WHOUserParser(message: string) {\n    return /:([^\\s]+)\\s([0-9]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s(H|G)(\\*?)(\\~|\\&|\\@|\\%|\\+)?/.exec(message);\n  }\n\n}\n\nexport class UsersWhos {\n  [key: string]: Who;\n}\n","import { UModes } from './../utils/UModes.utils';\n\nexport class Who {\n  serverFrom: string;\n  nick: string;\n  isNetOp: boolean;\n  isAway: boolean;\n  rawMsg: string;\n  mode: UModes;\n}\n","import { EventEmitter } from '@angular/core';\nimport { UserInChannel } from '../dto/UserInChannel';\n\n/*\n  Clase para manejar los usuarios que hay en un canal (mensaje inicial de usuarios por names)\n*/\n// @dynamic\nexport class UsersHandler {\n\n  private static readonly usersInChannel: ChannelUserList = {};\n  public static readonly usersInChannelResponse: EventEmitter<ChannelAndUserList> = new EventEmitter<ChannelAndUserList>();\n\n  public static addUsersToChannel(channel: string, users: UserInChannel[]) {\n    this.usersInChannel[channel] = users;\n    this.usersInChannelResponse.emit(new ChannelAndUserList(channel, users));\n  }\n\n  public static getChannelOfMessage(message: string) {\n    const messages = /(=|@|\\*)([^:]+):/.exec(message);\n    if(messages && messages.length > 2) {\n      return messages[2].trim();\n    } else {\n      console.error('GCOM, ', message);\n    }\n  }\n\n  public static getUsersInChannel(channel: string): UserInChannel[] {\n    return this.usersInChannel[channel];\n  }\n\n  public static setHandler(hdlr: OnUserList) {\n    this.usersInChannelResponse.subscribe(data => {\n      hdlr.onUserList(data.channel, data.userList);\n    });\n  }\n\n}\n\nexport class ChannelAndUserList {\n  channel: string;\n  userList: UserInChannel[];\n\n  constructor(channel: string, userList: UserInChannel[]) {\n    this.channel = channel;\n    this.userList = userList;\n  }\n}\n\nexport class ChannelUserList {\n  [key: string]: UserInChannel[];\n}\n\nexport interface OnUserList {\n  onUserList(channel: string, users: UserInChannel[]);\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { UModes } from '../utils/UModes.utils';\n\nexport class User {\n\n  public nick: string;\n  public mode: UModes;\n  public away?: boolean;\n\n  constructor(nick: string) {\n    if (nick[0] === '~') {\n      this.mode = UModes.FOUNDER;\n      nick = nick.substr(1);\n    } else if (nick[0] === '&') {\n      this.mode = UModes.ADMIN;\n      nick = nick.substr(1);\n    } else if (nick[0] === '@') {\n      this.mode = UModes.OPER;\n      nick = nick.substr(1);\n    } else if (nick[0] === '%') {\n      this.mode = UModes.HALFOPER;\n      nick = nick.substr(1);\n    } else if (nick[0] === '+') {\n      this.mode = UModes.VOICE;\n      nick = nick.substr(1);\n    }\n    this.nick = nick;\n  }\n\n}\n","import { Channel } from './Channel';\nimport { User } from './User';\n\nexport class UserInChannel extends User{\n\n  public channel: Channel;\n\n  constructor(nick: string, channel: string) {\n    super(nick);\n    this.channel = new Channel(channel);\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { ChannelInfo } from '../dto/ChannelInfo';\n\n/*\n  Clase para manejar el comando /list\n*/\n// @dynamic\nexport class ListHandler {\n\n  private static channels: ChannelInfo[] = [];\n  public static readonly channelListCreated: EventEmitter<ChannelInfo[]> = new EventEmitter<ChannelInfo[]>();\n\n  public static addChannels(channel: ChannelInfo): void {\n    this.channels.push(channel);\n  }\n\n  public static newChannelList(): void {\n    this.channels = [];\n    this.channelListCreated.emit(this.channels);\n  }\n\n  public static getChannelList(): ChannelInfo[] {\n    return this.channels;\n  }\n\n}\n","export class ChannelInfo {\n  public name: string;\n  public description: string;\n  public flags: string;\n  public users: number;\n\n  constructor (name: string, description: string, flags: string, users: number) {\n    this.name = name;\n    this.description = description;\n    this.flags = flags;\n    this.users = users;\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { NickChange } from '../dto/NickChange';\n\n\n/*\n  Clase para manejar los cambios de estado del usuario, como cuando es banneado, o kickeado de un canal.\n*/\n// @dynamic\nexport class StatusHandler {\n\n  public static readonly nickAlreadyInUse: EventEmitter<string> = new EventEmitter<string>();\n  public static readonly banned: EventEmitter<string> = new EventEmitter<string>();\n  public static readonly nickChanged: EventEmitter<NickChange> = new EventEmitter<NickChange>();\n\n  public static onNickAlreadyInUse(nickInUse: string) {\n    this.nickAlreadyInUse.emit(nickInUse);\n  }\n\n  public static onBanned(channel: string) {\n    this.banned.emit(channel);\n  }\n\n  public static onNickChanged(nick: NickChange) {\n    this.nickChanged.emit(nick);\n  }\n\n  public static setHandlerNickAlreadyInUse(hdlr: OnNickAlreadyInUse) {\n    this.nickAlreadyInUse.subscribe(data => {\n      hdlr.onNickAlreadyInUse(data);\n    });\n  }\n\n  public static setHandlerBanned(hdlr: OnBanned) {\n    this.banned.subscribe(data => {\n      hdlr.onBanned(data);\n    });\n  }\n\n  public static setHandlerNickChanged(hdlr: OnNickChanged) {\n    this.nickChanged.subscribe(data => {\n      hdlr.onNickChanged(data);\n    });\n  }\n\n}\n\nexport interface OnNickAlreadyInUse {\n  onNickAlreadyInUse(nickInUse: string);\n}\n\nexport interface OnBanned {\n  onBanned(channel: string);\n}\n\nexport interface OnNickChanged {\n  onNickChanged(nick: NickChange);\n}\n","export class NickChange {\n  oldNick: string;\n  newNick: string;\n  constructor(old: string, nnick: string) {\n    this.oldNick = old;\n    this.newNick = nnick;\n  }\n}\n","export class OriginData {\n  public nick?: string;\n  public identitity?: string;\n  public server: string;\n}\n\nexport class IRCMessage {\n  public origin: OriginData;\n  public simplyOrigin: string;\n  public code: string;\n  public target: string;\n  public message: string;\n  public tag?: string;\n  public body?: string;\n  public partials?: string[];\n}\n","// @dynamic\nexport class ValidRegex {\n\n  public static channelRegex() {\n    return '#([a-zA-Z0-9_#]+)';\n  }\n\n  public static userRegex() {\n    return '([a-zA-Z_][a-zA-Z0-9_]+)'\n  }\n\n  public static actionRegex() {\n    return /\\x01ACTION ([^\\x01]+)\\x01/;\n  }\n\n  public static modeRegex() {\n    return '(\\\\+|\\-)?([a-zA-Z]+)';\n  }\n\n  public static getRegex(regex: string) {\n    return new RegExp(regex);\n  }\n\n  public static pingRegex(nick: string) {\n    return '^(.*(\\\\s|,|:))?('+nick.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')+')((\\\\s|,|:).*)?$';\n  }\n\n}\n","import { EventEmitter } from '@angular/core';\nimport { NewMode } from '../dto/NewMode';\nimport { ValidRegex } from '../utils/validRegex';\n\n/**\n * Clase para gestionar los cambios de modos en un canal (sobre un usuario)\n */\n// @dynamic\nexport class ModeHandler {\n\n  public static readonly modeChange: EventEmitter<NewMode> = new EventEmitter<NewMode>();\n\n  public static modeParser(rawMessage: string): string[] {\n    let modeRaw = rawMessage.split(' MODE ')[1];\n    if(modeRaw.indexOf('#') == -1) {\n      const modeCut = modeRaw.split(':');\n      const regex = ValidRegex.getRegex(ValidRegex.modeRegex()).exec(modeCut[1]);\n      return [\n        undefined,\n        regex[1], // + o -\n        regex[2].trim(), // modo\n        modeCut[0].trim() // usuario\n      ];\n    } else {\n      const regex = ValidRegex.channelRegex()+\n      '\\\\s'+ValidRegex.modeRegex()+'\\\\s\\\\:?'+ // modos\n      ValidRegex.userRegex();\n      const regOut = ValidRegex.getRegex(\n        regex\n      ).exec(modeRaw);\n      if(regOut) {\n        return [\n          undefined,\n          regOut[2],\n          regOut[3].trim(),\n          regOut[4]\n        ];\n      } else {\n        // modo de canal?\n        const modos = modeRaw.split(':');\n        return [\n          undefined,\n          undefined,\n          modos[1],\n          undefined\n        ]\n      }\n    }\n  }\n\n  public static changeMode(mode: NewMode) {\n    this.modeChange.emit(mode);\n  }\n\n}\n","import { Away } from './../dto/Away';\nimport { EventEmitter } from '@angular/core';\n\n/**\n * Handler de mensajes de away\n */\n// @dynamic\nexport class AwayHandler {\n\n  public static readonly awayResponse: EventEmitter<Away> = new EventEmitter<Away>();\n\n  public static onAway(away: Away) {\n    this.awayResponse.emit(away);\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { Away } from './../dto/Away';\n\n/**\n * clase para manejar los eventos de ignorar.\n */\n// @dynamic\nexport class IgnoreHandler {\n  public static readonly ignoreResponse: EventEmitter<Away> = new EventEmitter<Away>();\n\n  public static onIgnore(ignore: Away) {\n    this.ignoreResponse.emit(ignore);\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { IRCMessage } from '../utils/IRCMessage.util';\n/**\n * clase para manejar los mensajes del día y el hook para enviar el auth al bouncer\n */\n// @dynamic\nexport class MotdHandler {\n  public static readonly motdResponse: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n  public static readonly requirePasswordResponse: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n}\n","/**\n * clase para manejar los cambios de estado de un canal, como el topic y los modos.\n */\n\nimport { EventEmitter } from '@angular/core';\n\n// @dynamic\nexport class ChannelStatusHandler {\n\n  private static readonly channelsTopics: ChannelsTopic = {};\n  public static readonly channelTopicResponse: EventEmitter<ChannelTopicUpdate> = new EventEmitter<ChannelTopicUpdate>();\n\n  public static setChannelTopic(channel: string, topic: string) {\n    this.channelsTopics[channel] = topic;\n    this.channelTopicResponse.emit(new ChannelTopicUpdate(channel, topic));\n  }\n\n  public static getChannelTopic(channel: string) {\n    return this.channelsTopics[channel];\n  }\n\n  public static findChannels(message: string): string[] {\n    let channels = /#([^\\s]+)/g.exec(message) as Array<string>;\n    channels = channels.slice(1);\n    return channels;\n  }\n\n  public static setHandler(hdlr: OnTopicUpdate) {\n    this.channelTopicResponse.subscribe(topic => {\n      hdlr.onTopicUpdate(topic.channel, topic.newTopic);\n    });\n  }\n\n}\n\nexport class ChannelsTopic {\n  [key: string]: string;\n}\n\nexport class ChannelTopicUpdate {\n  channel: string;\n  newTopic: string;\n  constructor(channel: string, newTopic: string) {\n    this.channel = channel;\n    this.newTopic = newTopic;\n  }\n}\n\nexport interface OnTopicUpdate {\n  onTopicUpdate(channel: string, newTopic: string);\n}\n","import { Channel } from './Channel';\nimport { User } from './User';\n\nexport class Part {\n  public user: User;\n  public channel: Channel;\n  public message: string;\n}\n","import { EventEmitter } from '@angular/core';\nimport { Quit } from './../dto/Quit';\n\n// @dynamic\nexport class QuitHandler {\n  public static readonly quitResponse: EventEmitter<Quit> = new EventEmitter<Quit>();\n\n  public static onQuit(quit: Quit) {\n    this.quitResponse.emit(quit);\n  }\n\n  public static setHandler(hdlr: OnQuit) {\n    this.quitResponse.subscribe(data => {\n      hdlr.onQuit(data);\n    });\n  }\n}\n\nexport interface OnQuit {\n  onQuit(data: Quit);\n}\n","import { User } from './User';\n\nexport class Quit {\n  public user: User;\n  constructor(user: string) {\n    this.user = new User(user);\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { Join } from './../dto/Join';\n\n// @dynamic\nexport class JoinHandler {\n  public static readonly joinResponse: EventEmitter<Join> = new EventEmitter<Join>();\n\n  public static onJoin(join: Join) {\n    this.joinResponse.emit(join);\n  }\n\n  public static setHandler(hdlr: OnJoin) {\n    this.joinResponse.subscribe((join: Join) => {\n      hdlr.onJoin(join);\n    });\n  }\n}\n\nexport interface OnJoin {\n  onJoin(data: Join);\n}\n","import { EventEmitter } from '@angular/core';\nimport { IRCMessage } from '../utils/IRCMessage.util';\n\n// @dynamic\nexport class ServerHandler {\n  public static readonly serverResponse: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n  public static readonly serverNoticeResponse: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n\n  public static onServerResponse(msg: IRCMessage) {\n    this.serverResponse.emit(msg);\n  }\n\n  public static onServerNoticeResponse(msg: IRCMessage) {\n    this.serverNoticeResponse.emit(msg);\n  }\n}\n","import { IndividualMessage } from './../dto/IndividualMessage';\nimport { IRCMessage } from '../utils/IRCMessage.util';\nimport { EventEmitter } from '@angular/core';\nimport { ValidRegex } from '../utils/validRegex';\n\n/**\n * Clase para manejar la recepción de mensajes privados y de canal.\n */\n// @dynamic\nexport class MessageHandler {\n\n  public static readonly messageResponse: EventEmitter<IndividualMessage> = new EventEmitter<IndividualMessage>();\n\n  public static onMessage(message: IndividualMessage) {\n    this.messageResponse.emit(message);\n  }\n\n  public static getMeAction(parsedMessage: IRCMessage): string[] {\n    return ValidRegex.actionRegex().exec(parsedMessage.message);\n  }\n\n  public static setHandler(hdlr: OnMessageReceived) {\n    this.messageResponse.subscribe(message => {\n      hdlr.onMessageReceived(message);\n    });\n  }\n\n}\n\nexport interface OnMessageReceived {\n  onMessageReceived(message: IndividualMessage);\n}\n","import { MessageWithMetadata } from '../utils/PostProcessor';\n\nexport class IndividualMessage {\n  messageType: IndividualMessageTypes;\n  author: string;\n  message: string;\n  richMessage?: MessageWithMetadata;\n  meAction: boolean;\n  specialAction?: boolean;\n  isAwayNotify?: boolean;\n  time?: string;\n  date?: string;\n  channel?: string;\n  mention?: boolean;\n  fromLog?: boolean;\n  privateAuthor?: string; // when i send private message my nick is here.\n}\n\nexport enum IndividualMessageTypes {\n  PRIVMSG,\n  CHANMSG,\n  NOTIFY // notificación contra un canal.\n}\n","export class Time {\n  public static getTime(): string {\n    const now = new Date();\n    const hours = now.getHours() < 10 ? '0' + now.getHours() : now.getHours();\n    const min = now.getMinutes() < 10 ? '0' + now.getMinutes() : now.getMinutes();\n    const second = now.getSeconds() < 10 ? '0' + now.getSeconds() : now.getSeconds();\n    return hours + ':' + min + ':' + second;\n  }\n\n  public static getDateStr(): string {\n    const now = new Date();\n    const month = (now.getMonth() + 1);\n    const monthStr = month < 10 ? '0' + month : month;\n    const day = now.getDate();\n    const dayStr = day < 10 ? '0' + day : day;\n    return dayStr + '/' + monthStr + '/' + now.getFullYear();\n  }\n}\n","import { IRCMessage } from './../utils/IRCMessage.util';\nimport { EventEmitter } from '@angular/core';\n\n// @dynamic\nexport class ModeratedHandler {\n  public static readonly channelModerated: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n}\n","import { Join } from './dto/Join';\nimport { PartHandler } from './handlers/Part.handler';\nimport { KickInfo } from './dto/KickInfo';\nimport { KickHandler } from './handlers/Kick.handler';\nimport { Away } from './dto/Away';\nimport { NewMode } from './dto/NewMode';\nimport { GmodeHandler } from './handlers/Gmode.handler';\nimport { Channel } from './dto/Channel';\nimport { ChannelListHandler } from './handlers/ChannelList.handler';\nimport { WhoIsHandler } from './handlers/Whois.handler';\nimport { WhoHandler } from './handlers/Who.handler';\nimport { Who } from './dto/Who';\nimport { UModes } from './utils/UModes.utils';\nimport { UsersHandler } from './handlers/Users.handler';\nimport { UserInChannel } from './dto/UserInChannel';\nimport { ListHandler } from './handlers/List.handler';\nimport { ChannelInfo } from './dto/ChannelInfo';\nimport { StatusHandler } from './handlers/Status.handler';\nimport { NickChange } from './dto/NickChange';\nimport { IRCMessage, OriginData } from './utils/IRCMessage.util';\nimport { ModeHandler } from './handlers/Mode.handler';\nimport { User } from './dto/User';\nimport { AwayHandler } from './handlers/Away.handler';\nimport { IgnoreHandler } from './handlers/Ignore.Handler';\nimport { MotdHandler } from './handlers/Motd.handler';\nimport { ChannelStatusHandler } from './handlers/ChannelStatus.handler';\nimport { Part } from './dto/Part';\nimport { QuitHandler } from './handlers/Quit.handler';\nimport { Quit } from './dto/Quit';\nimport { JoinHandler } from './handlers/Join.handler';\nimport { ServerHandler } from './handlers/Server.handler';\nimport { MessageHandler } from './handlers/Message.handler';\nimport { IndividualMessage, IndividualMessageTypes } from './dto/IndividualMessage';\nimport { Time } from './utils/Time.util';\nimport { ModeratedHandler } from './handlers/Moderated.handler';\n\nexport class IRCParserV2 {\n\n  public static parseMessage(message: string): IRCMessage[] {\n      const out = [];\n      message.split('\\r\\n').forEach(msgLine => {\n          const r = /:([^:]+):?(.*)/.exec(msgLine);\n          const TAG = r[1];\n          const MSG = r[2];\n          const partials = TAG.split(' ');\n          const im = new IRCMessage();\n          im.body = MSG;\n          im.tag = TAG;\n          im.partials = partials;\n          im.code = partials[1];\n          const target = /([^!]*!)?([^@]+@)?(.*)/.exec(partials[0]);\n          const od = new OriginData();\n          if (!target[2]) {\n              od.server = target[1];\n              im.simplyOrigin = od.server;\n          } else if (!target[3]) {\n              od.server = target[2];\n              od.identitity = target[1].slice(0, target[1].length - 1);\n              im.simplyOrigin = od.identitity;\n          } else {\n              od.server = target[3];\n              od.identitity = target[2].slice(0, target[1].length - 1);\n              od.nick = target[1].slice(0, target[1].length - 1);\n              im.simplyOrigin = od.nick;\n          }\n          im.origin = od;\n          im.target = partials[2];\n          im.message = MSG;\n          out.push(im);\n      });\n      return out;\n  }\n\n  public static processMessage(parsedMessage: IRCMessage, rawMessage: string, actualNick: string): void {\n\n    if (parsedMessage.code === '319') { // lista de canales\n      const chnlList = [];\n      parsedMessage.message.split(' ').forEach(pmChnl => {\n        const chnl = new Channel(pmChnl);\n        chnlList.push(chnl);\n      });\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'channelList', chnlList);\n      ChannelListHandler.setChannelList(parsedMessage.partials[3], chnlList);\n      return;\n    }\n\n    if (parsedMessage.code === '718') {\n      // :avalon.hira.io 718 Tulkalex Tulkaz ~Harkito@net-j7j.cur.32.45.IP :is messaging you, and you have user mode +g set.\n      // Use /ACCEPT +Tulkaz to allow.\n      GmodeHandler.privateRequest(parsedMessage.partials[3]);\n      return;\n    }\n\n    if (parsedMessage.code === '378') {\n      // connecting from\n      // :avalon.hira.io 378 Tulkalex Tulkalex :is connecting from ~Tulkalandi@167.99.172.78 167.99.172.78\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'connectedFrom', parsedMessage.body.replace('is connecting from ', ''));\n      return;\n    }\n    if (parsedMessage.code === '312') {\n      // server desde donde está conectado\n      // :avalon.hira.io 312 Tulkalex Tulkalex avalon.hira.io :Avalon - Frankfurt, Germany\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'server', parsedMessage.body);\n      return;\n    }\n    if (parsedMessage.code === '313') {\n      // :avalon.hira.io 313 Tulkalex Tulkalex :is a GlobalOp on Hira\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'isGOP', true);\n      return;\n    }\n    if (parsedMessage.code === '379') {\n      // :avalon.hira.io 379 Tulkalex Tulkalex :is using modes +Iiow\n      const modes = parsedMessage.body.split(' ');\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'modes', modes[modes.length - 1]);\n      return;\n    }\n    if (parsedMessage.code === '330') {\n      // :avalon.hira.io 330 Tulkalex Tulkalex alexander1712 :is logged in as\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'userAccount', parsedMessage.partials[4]);\n      return;\n    }\n    if (parsedMessage.code === '671') {\n      // :avalon.hira.io 671 Tulkalex Tulkalex :is using a secure connection\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'isSecured', true);\n      return;\n    }\n    if (parsedMessage.code === '317') {\n      // :avalon.hira.io 317 Tulkalex Tulkalex 6318 1602266231 :seconds idle, signon time\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'idle', parsedMessage.partials[4]);\n      WhoIsHandler.addWhoisPartial(parsedMessage.partials[3], 'lastLogin', parsedMessage.partials[5]);\n      return;\n    }\n\n    if (parsedMessage.code === '318') {\n      WhoIsHandler.finalWhoisMessage(parsedMessage.partials[3]);\n      return;\n    }\n\n    if (parsedMessage.code === '352') { // user info (WHO response)\n      const data = WhoHandler.WHOUserParser(rawMessage);\n      if (data) {\n        const whoData = new Who();\n        whoData.serverFrom = data[7];\n        whoData.nick = data[8];\n        whoData.isAway = data[9] === 'G';\n        whoData.isNetOp = data[10] === '*';\n        whoData.rawMsg = rawMessage;\n        const mod = data[11];\n        if (mod === '~') {\n          whoData.mode = UModes.FOUNDER;\n        } else if (mod === '&') {\n          whoData.mode = UModes.ADMIN;\n        } else if (mod === '@') {\n          whoData.mode = UModes.OPER;\n        } else if (mod === '%') {\n          whoData.mode = UModes.HALFOPER;\n        } else if (mod === '+') {\n          whoData.mode = UModes.VOICE;\n        }\n        WhoHandler.addWhoData(data[8], whoData);\n      } else {\n        console.error('BAD WHO RESPONSE PARSED: ', rawMessage, data);\n      }\n      return;\n    }\n\n    if (parsedMessage.code === '353') { // names\n      const channel = UsersHandler.getChannelOfMessage(rawMessage);\n      const users = parsedMessage.message.trim().split(' ');\n      const usersInChannel: UserInChannel[] = [];\n      users.forEach(user => {\n        usersInChannel.push(new UserInChannel(user, channel));\n      });\n      const chnlObj = new Channel(channel);\n      UsersHandler.addUsersToChannel(chnlObj.name, usersInChannel);\n      return;\n    }\n\n    // 321 inicio lista de canales (borrar)\n    if (parsedMessage.code === '321') {\n      ListHandler.newChannelList();\n      return;\n    }\n\n    // 322 canal de lista de canales\n    if (parsedMessage.code === '322') {\n      const body = parsedMessage.body.split(']');\n      ListHandler.addChannels(new ChannelInfo(parsedMessage.partials[3].slice(1), body[1], body[0].replace('[' , ''), parseInt(parsedMessage.partials[4])));\n      return;\n    }\n\n    if (parsedMessage.code === '433') { // nick already in use\n      // TODO: obtener nick anterior.\n      StatusHandler.onNickAlreadyInUse('');\n      return;\n    }\n\n    if (parsedMessage.code === '474') {\n      // TODO: obtener canal.\n      StatusHandler.onBanned('');\n      return;\n    }\n\n    if (parsedMessage.code === 'NICK') {\n      StatusHandler.onNickChanged(\n        new NickChange(parsedMessage.simplyOrigin, parsedMessage.target ? parsedMessage.target : parsedMessage.message)\n      );\n      return;\n    }\n\n    if (parsedMessage.code === 'MODE') {\n      const mode = ModeHandler.modeParser(rawMessage);\n      if(mode[3]) {\n        const nmode = new NewMode();\n        nmode.userTarget = new User(mode[3]);\n        nmode.channelTarget = parsedMessage.target;\n        nmode.modeAdded = mode[1] === '+';\n        nmode.mode = mode[2];\n        ModeHandler.changeMode(nmode);\n      } else {\n        const nmode = new NewMode();\n        nmode.channelTarget = parsedMessage.target;\n        nmode.userTarget = new User(parsedMessage.target);\n        nmode.mode = mode[2];\n        ModeHandler.changeMode(nmode);\n      }\n      return;\n    }\n\n    if (parsedMessage.code === '301') { // away message\n      const away = new Away();\n      away.author = parsedMessage.partials[3];\n      away.message = parsedMessage.message;\n      AwayHandler.onAway(away);\n      return;\n    }\n\n    if (parsedMessage.code === '716') { // server side ignored\n      const ignore = new Away();\n      ignore.author = parsedMessage.partials[3];\n      ignore.message = parsedMessage.message;\n      IgnoreHandler.onIgnore(ignore);\n    }\n\n    if (parsedMessage.code === '464') {\n      MotdHandler.requirePasswordResponse.emit(parsedMessage);\n      return;\n    }\n\n    if (parsedMessage.code === '404') {\n      ModeratedHandler.channelModerated.emit(parsedMessage);\n      return;\n    }\n\n    if (parsedMessage.code === '375') {\n      MotdHandler.motdResponse.emit(parsedMessage);\n      return;\n    }\n\n    if (parsedMessage.code === 'PONG') {\n      return;\n    }\n\n    if (parsedMessage.code === 'NOTICE') {\n      if (parsedMessage.simplyOrigin && parsedMessage.simplyOrigin !== '*status' && parsedMessage.target[0] === '#') {\n        const message = new IndividualMessage();\n        message.messageType = IndividualMessageTypes.NOTIFY;\n        message.author = parsedMessage.simplyOrigin;\n        message.message = parsedMessage.message;\n        message.meAction = false;\n        message.channel = parsedMessage.target;\n        message.time = Time.getTime();\n        message.date = Time.getDateStr();\n        MessageHandler.onMessage(message);\n        return;\n      } else {\n        ServerHandler.onServerNoticeResponse(parsedMessage);\n        return;\n      }\n    }\n\n    if (parsedMessage.code === '332') {\n      const channels = ChannelStatusHandler.findChannels(rawMessage);\n      ChannelStatusHandler.setChannelTopic(channels[0], parsedMessage.message);\n      return;\n    }\n\n    if (parsedMessage.code === 'TOPIC') {\n      ChannelStatusHandler.setChannelTopic(parsedMessage.target, parsedMessage.message);\n      return;\n    }\n\n    if (parsedMessage.code === '315') {\n      // TODO: check this... End of who\n      return;\n    }\n\n    if (parsedMessage.code === 'KICK') {\n      let channel = parsedMessage.target;\n      const kickData = KickHandler.kickParse(rawMessage);\n      const kickInfo = new KickInfo();\n      kickInfo.channel = new Channel(channel);\n      kickInfo.operator = parsedMessage.message;\n      kickInfo.userTarget = new User(kickData[2]);\n      KickHandler.onKick(kickInfo);\n    }\n\n    if (parsedMessage.code === 'PART') {\n      // :Harko!~Harkolandia@harkonidaz.irc.tandilserver.com PART #SniferL4bs :\"Leaving\"\n      let channel = parsedMessage.target;\n      if (!channel) {\n        channel = parsedMessage.message;\n      }\n      const part = new Part();\n      part.channel = new Channel(channel);\n      part.message = parsedMessage.message;\n      part.user = new User(parsedMessage.simplyOrigin);\n      PartHandler.onPart(part);\n    }\n\n    if (parsedMessage.code === 'QUIT') {\n      QuitHandler.onQuit(new Quit(parsedMessage.simplyOrigin));\n    }\n\n    if (parsedMessage.code === 'JOIN') {\n      const join = new Join();\n      const channel = parsedMessage.message ? parsedMessage.message : parsedMessage.target;\n      join.channel = new Channel(channel);\n      join.user = new User(parsedMessage.simplyOrigin);\n      join.origin = parsedMessage.origin;\n      JoinHandler.onJoin(join);\n    }\n\n    if (parsedMessage.code === 'PRIVMSG') {\n      const meMsg = MessageHandler.getMeAction(parsedMessage);\n      const message = new IndividualMessage();\n      message.author = parsedMessage.simplyOrigin;\n      if (meMsg) {\n        message.message = meMsg[1];\n        message.meAction = true;\n      } else {\n        message.message = parsedMessage.message;\n        message.meAction = false;\n      }\n      message.time = Time.getTime();\n      message.date = Time.getDateStr();\n      if (parsedMessage.target === actualNick) { // privado\n        message.messageType = IndividualMessageTypes.PRIVMSG;\n      } else {\n        message.messageType = IndividualMessageTypes.CHANMSG;\n        message.channel = parsedMessage.target;\n      }\n      message.mention = message.message ? message.message.indexOf(actualNick) >= 0 : false;\n      MessageHandler.onMessage(message);\n      return;\n    }\n\n    ServerHandler.onServerResponse(parsedMessage);\n    return;\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n\n\n@NgModule({\n  declarations: [\n\n  ],\n  imports: [\n\n  ],\n  exports: [\n\n  ]\n})\nexport class IRCoreModule { }\n","import {webSocket, WebSocketSubject} from 'rxjs/webSocket';\nimport { Observable, Subject } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nexport class WebSocketUtil {\n\n  public static readonly messageReceived = new EventEmitter<MessageData>();\n  public static readonly statusChanged = new EventEmitter<ConnectionStatusData<any>>();\n\n  private wss: WebSocketSubject<string>;\n  private readonly onOpenSubject = new Subject();\n  private readonly onCloseSubject = new Subject();\n\n  private static connected: boolean = false;\n\n  connect(url: string, uuid: string): Observable<string> {\n      this.wss = webSocket<string>({\n        url,\n        serializer: msg => msg,\n        deserializer: msg => msg.data,\n        openObserver: this.onOpenSubject,\n        closeObserver: this.onCloseSubject\n      });\n      const obs = this.wss.asObservable();\n      obs.subscribe(msg => {\n        WebSocketUtil.messageReceived.emit(new MessageData(uuid, msg));\n      },\n      err => {\n        const status = new ConnectionStatusData<any>();\n        status.status = ConnectionStatus.ERROR;\n        status.data = {uuid, err};\n        console.error('WS errror?', status.data);\n        WebSocketUtil.statusChanged.emit(status);\n        WebSocketUtil.connected = false;\n      });\n      this.onCloseSubject.subscribe(() => {\n        const status = new ConnectionStatusData<string>();\n        status.status = ConnectionStatus.DISCONNECTED;\n        status.data = uuid;\n        WebSocketUtil.statusChanged.emit(status);\n        WebSocketUtil.connected = false;\n      });\n      this.onOpenSubject.subscribe(() => {\n        const status = new ConnectionStatusData<string>();\n        status.status = ConnectionStatus.CONNECTED;\n        status.data = uuid;\n        WebSocketUtil.statusChanged.emit(status);\n        WebSocketUtil.connected = true;\n      });\n      return obs;\n  }\n\n  public send(msg: string) {\n      this.wss.next(msg);\n  }\n\n  public disconnect() {\n    this.wss.complete();\n  }\n\n  public static isConnected() {\n    return WebSocketUtil.connected;\n  }\n\n}\n\nexport class ConnectionStatusData<t> {\n  status: ConnectionStatus;\n  data: t;\n}\n\nexport enum ConnectionStatus {\n  CONNECTED,\n  DISCONNECTED,\n  ERROR\n}\n\nexport class MessageData {\n  uuid: string;\n  message: string;\n  constructor(uuid: string, message: string) {\n    this.uuid = uuid;\n    this.message = message;\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { NickChange } from '../dto/NickChange';\nimport { OnNickChanged, StatusHandler } from '../handlers/Status.handler';\n\n/**\n * Servicio para gestionar mi información\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserInfoService implements OnNickChanged {\n\n  private actualNick: string;\n  public readonly onChangeNick = new EventEmitter<string>();\n\n  constructor() {\n    StatusHandler.setHandlerNickChanged(this);\n  }\n\n  public getNick(): string {\n    return this.actualNick;\n  }\n\n  public setNick(nick: string) {\n    this.actualNick = nick;\n    this.onChangeNick.emit(nick);\n  }\n\n  onNickChanged(nick: NickChange) {\n    if (nick.oldNick === this.actualNick) {\n      this.actualNick = nick.newNick;\n    }\n  }\n\n}\n","import { MessageData, WebSocketUtil } from './utils/WebSocket.util';\nimport { Injectable } from '@angular/core';\nimport { IRCParserV2 } from './IRCParserV2';\nimport { UserInfoService } from './services/user-info.service';\nimport { IndividualMessage, IndividualMessageTypes } from './dto/IndividualMessage';\nimport { Time } from './utils/Time.util';\nimport { MessageHandler } from './handlers/Message.handler';\n\ndeclare var stopEff;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IRCoreService {\n\n  public static clientName = 'IRCoreV2';\n\n  private webSocket: WebSocketUtil;\n\n  constructor(private userSrv: UserInfoService) {\n    WebSocketUtil.messageReceived.subscribe((message: MessageData) => {\n      if (message.message.indexOf('PING') === 0) {\n        const pingResp = message.message.slice(5);\n        this.sendRaw('PONG ' + pingResp);\n        return;\n      }\n      if (message.message.indexOf('ERROR') === 0) {\n        console.error('Received error from stream: ', message.message);\n        return;\n      }\n      IRCParserV2.parseMessage(message.message).forEach(msg => {\n        IRCParserV2.processMessage(msg, message.message, this.userSrv.getNick());\n      });\n    });\n  }\n\n  public connect(url: string) {\n    this.webSocket = new WebSocketUtil();\n    this.webSocket.connect(url, 'WSocket');\n  }\n\n  public handshake(username: string, apodo: string, gatwayHost?: string) {\n    this.sendRaw('ENCODING UTF-8');\n    if (gatwayHost) {\n      this.sendRaw('HOST ' + gatwayHost);\n    }\n    this.sendRaw('USER ' + username + ' * * :' + IRCoreService.clientName);\n    this.setNick(apodo);\n  }\n\n  public identify(password: string) {\n    this.sendRaw('PRIVMSG NickServ identify ' + password);\n  }\n\n  public serverPass(user: string, password: string) {\n    this.sendRaw('PASS ' + user + ':' + password);\n  }\n\n  public setNick(nick: string) {\n    this.sendRaw('NICK ' + nick);\n    this.userSrv.setNick(nick);\n  }\n\n  public sendWhox(channel) {\n    channel = channel[0] === '#' ? channel : '#' + channel;\n    this.sendRaw('WHO ' + channel);\n  }\n\n  public join(channel: string) {\n    if(channel[0] != '#') {\n      channel = '#' + channel;\n    }\n    this.sendRaw('JOIN ' + channel)\n  }\n\n  public disconnect(): void {\n    this.webSocket.disconnect();\n  }\n\n  public sendRaw(rawMessage: string) {\n    this.webSocket.send(rawMessage);\n  }\n\n  public sendMessageOrCommand(command: string, target?: string): boolean { // return true if is message or false if is command.\n    if (command[0] === '/') {\n      let cmd = command.slice(1);\n      const verb = cmd.split(' ')[0].toLowerCase();\n      if (verb === 'query') {\n        cmd = cmd.slice(5).trim();\n        // TODO: query a cmd\n      }\n      if (verb === 'join') {\n        // enviar cmd esto es un join\n        this.sendRaw(cmd);\n        return false;\n      }\n      if (verb === 'umode') {\n        // enviar cmd esto es un join\n        cmd = cmd.replace('umode', 'mode ' + this.userSrv.getNick());\n      }\n      if (verb === 'stop') {\n        // enviar cmd esto es un join\n        stopEff();\n        return false;\n      }\n      if (verb === 'me') {\n        cmd = cmd.slice(2).trim();\n        this.sendRaw('PRIVMSG ' + target + ' :' + String.fromCharCode(1) + 'ACTION ' + cmd + String.fromCharCode(1));\n        this._triggerMessage(cmd, target, true);\n        return true;\n      }\n      if (verb === 'cs') {\n        // chanserv?\n        cmd = cmd.replace('cs', 'PRIVMSG ChanServ :');\n      }\n      if (verb === 'hc') {\n        // chanserv?\n        cmd = cmd.replace('hc', 'PRIVMSG HiraClient :');\n      }\n      if (verb === 'ns') {\n        // nickserv?\n        cmd = cmd.replace('ns', 'PRIVMSG NickServ :');\n      }\n      if (verb === 'msg') {\n        cmd = cmd.replace('msg', 'PRIVMSG');\n      }\n      if (verb === 'leave') {\n        cmd = cmd.replace('leave', 'PART');\n      }\n      if (verb === 'away') {\n        if (cmd.length === 4) {\n          const now = new Date();\n          cmd += ' AFK desde ' + now.getDay() + '/' + (now.getMonth() + 1) + '/' + now.getFullYear() + ' ' +\n                  now.getHours() + ':' + now.getMinutes();\n        }\n      }\n      if (verb === 'back') {\n        cmd = cmd.replace('back', 'away');\n      }\n      this.sendRaw(cmd);\n      return false;\n    } else {\n      if(target) {\n        this.sendRaw('PRIVMSG ' + target + ' :' + command);\n        this._triggerMessage(command, target, false);\n      } else {\n        this.sendRaw(command);\n      }\n      return true;\n    }\n  }\n\n  private _triggerMessage(command: string, target: string, isMe: boolean) {\n    const iMessage = new IndividualMessage();\n    iMessage.author = this.userSrv.getNick();\n    iMessage.message = command;\n    iMessage.meAction = isMe;\n    iMessage.date = Time.getDateStr();\n    iMessage.time = Time.getTime();\n    iMessage.messageType = target[0] == '#' ? IndividualMessageTypes.CHANMSG : IndividualMessageTypes.PRIVMSG;\n    if(iMessage.messageType === IndividualMessageTypes.CHANMSG) {\n      iMessage.channel = target;\n    } else {\n      iMessage.privateAuthor = iMessage.author;\n      iMessage.author = target;\n    }\n    MessageHandler.onMessage(iMessage);\n  }\n\n  public getWS(): WebSocketUtil{\n    return this.webSocket;\n  }\n}\n","// @dynamic\nexport class AvatarHelper {\n\n  private static avatarURL: string;\n\n  public static setAvatarURL(url: string) {\n    this.avatarURL = url;\n  }\n\n  public static getAvatarURL(): string {\n    return this.avatarURL;\n  }\n\n}\n","import { AvatarHelper } from './../helpers/avatar.helper';\nimport { MessageWithMetadata } from './../utils/PostProcessor';\nimport { User } from '../dto/User';\n\nexport class ChannelData {\n  name: string;\n  topic: string;\n  users: User[] = [];\n  messages: GenericMessage[] = [];\n}\n\nexport class GenericMessage {\n  message: string;\n  author?: Author<User | string>;\n  date: string;\n  special: boolean; // for actions \"me\"\n  notify?: boolean; // for server message\n  quote?: Quote;\n\n  // post-loaded\n  messageWithMetadata?: MessageWithMetadata;\n  target?: string; // nombre del chat o conversación\n  fromHistory?: boolean;\n}\n\nexport class Quote {\n  author: string | User;\n  quote: string;\n}\n\nexport class Author<t> {\n  user: t;\n  image: string;\n\n  constructor(user: t) {\n    let imageURL = AvatarHelper.getAvatarURL();\n    if(typeof user == 'string') {\n      this.image = imageURL + user;\n    } else {\n      this.image = imageURL + (user as any).nick;\n    }\n    this.user = user;\n  }\n}\n","declare var startEventEffect: any;\ndeclare var startEventEffectRegalo: any;\ndeclare var startEventEffectMeteor: any;\ndeclare var startEventEffectCabritas: any;\ndeclare var startEventEffectPrimavera: any;\ndeclare var startEventEffectVerano: any;\ndeclare var startEventEffectOtono: any;\ndeclare var startEventEffectKz2s: any;\n\nexport class EmoteList {\n\n  public static readonly facesLocation = 'assets/faces/';\n  public static readonly specialLocation = 'assets/specials/';\n  public static readonly facesExtension = '.png';\n  public static readonly memesLocation = 'assets/em-mem/';\n  public static readonly memesExtension = '';\n\n  public static readonly specialFaces = {\n    'Gabriela-': [\n      'regla',\n      'magico',\n      'stamp'\n    ],\n    Polsaker: [\n      'stamp'\n    ]\n  };\n\n  public static readonly faces = [\n    'aaa',\n    'break',\n    'chaky',\n    'challenge',\n    'cry',\n    'ehh',\n    'facepalm',\n    'fap',\n    'fffpf',\n    'fu',\n    'fuckyeah',\n    'genius',\n    'hmmm',\n    'hpm',\n    'jij',\n    'laugh',\n    'LOL',\n    'magicBook',\n    'magicCircle',\n    'magicDrug',\n    'magichat',\n    'no',\n    'oka',\n    'rage',\n    'siuu',\n    'sparkle',\n    'stickmagic',\n    'stickmagic2',\n    'trollface',\n    'mog',\n    'why',\n    'WitchHat',\n    'why',\n    'yao',\n    'true',\n    'amazing',\n    'forever',\n    'notbad',\n    'brindis',\n    'buttcoin',\n    'cigar',\n    'cigar2',\n    'coffee',\n    'coffee2',\n    'coffee3',\n    'goatman',\n    'hacker',\n    'service',\n    'stick',\n    'wine',\n    'wineBottle',\n    'escoba',\n    'principito',\n    'baskerville',\n    'cumple',\n    'cumple2',\n    'abrazo',\n    'agua1',\n    'agua2',\n    'angry',\n    'barco',\n    'eagle',\n    'fatcat',\n    'fox',\n    'handshake',\n    'kiss',\n    'rose',\n    'tarta',\n    'te',\n    'whisky',\n    'zumo',\n    'burger',\n    'candy',\n    'caniche',\n    'celtic',\n    'coca',\n    'editorial',\n    'gaviota',\n    'goat',\n    'icecream',\n    'listado',\n    'magicwind',\n    'medal',\n    'musical',\n    'palette',\n    'pizza',\n    'podium',\n    'batido',\n    'fresas',\n    'wizard',\n    'xane'\n  ];\n\n  public static readonly memes = [\n    'baneo',\n    'baneo2',\n    'baneo3',\n    'buscar',\n    'buscar2',\n    'comunicacion',\n    'despedida',\n    'expulsar',\n    'hacker',\n    'hacker2',\n    'hacker3',\n    'hacker4',\n    'hacker5',\n    'hacker6',\n    'hacker7',\n    'hacker8',\n    'hacker9',\n    'hacker10',\n    'hacker11',\n    'hacker12',\n    'impuestos',\n    'impuestos2',\n    'llegada',\n    'magia',\n    'magia2',\n    'magia3',\n    'magia4',\n    'magia5',\n    'magia6',\n    'nopreguntas',\n    'nopreguntas2',\n    'topic',\n    'topic2'\n  ];\n\n  public static getMeme(name: string, author: string): string {\n    if (this.memes.findIndex(meme => meme === name) >= 0) {\n      return this.memesLocation + name + this.memesExtension;\n    } else {\n      return undefined;\n    }\n  }\n\n  public static getFace(name: string, author: string): string {\n    if (this.faces.findIndex(meme => meme === name) >= 0) {\n      return this.facesLocation + name + this.facesExtension;\n    } else if (this.specialFaces[author] &&\n               this.specialFaces[author].findIndex(meme => meme === name) >= 0) {\n      return this.specialLocation + name + this.facesExtension;\n    } else if (author === 'Gabriela-') {\n      if (name === 'magia') {\n        startEventEffect();\n      }\n      if (name === 'primavera') {\n        startEventEffectPrimavera();\n      }\n      if (name === 'verano') {\n        startEventEffectVerano();\n      }\n      if (name === 'otono') {\n        startEventEffectOtono();\n      }\n      if (name === 'cabritas') {\n        startEventEffectCabritas();\n      }\n      if (name === 'regalos') {\n        startEventEffectRegalo();\n      }\n      if (name === 'lluvia') {\n        startEventEffectMeteor();\n      }\n      if (name === 'kz2') {\n        startEventEffectKz2s();\n      }\n      return undefined;\n    } else if (author === 'Alex' || author === 'Tulkalex' || author === 'Tulkalen') {\n      if (name === 'kz2') {\n        startEventEffectKz2s(); // Probando\n      }\n      return undefined;\n    } else {\n      return undefined;\n    }\n  }\n}\n","import { EmoteList } from './EmoteList';\nimport { ValidRegex } from './validRegex';\n\nexport class PostProcessor {\n\n  public static processMessage(message: string, author: string, me: string): MessageWithMetadata {\n    const mwm = new MessageWithMetadata();\n\n    const youtubeLink = /((?:https?:)?\\/\\/)?((?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?/.exec(message);\n    if (youtubeLink) {\n      message = message.replace(youtubeLink[0], '');\n      mwm.youtube = youtubeLink[5];\n    }\n    const imageLink = /(http(s?):)([\\/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/.exec(message);\n    if (imageLink) {\n      message = message.replace(imageLink[0], '');\n      mwm.image = imageLink[0];\n    }\n    const otherLink = /(http|https):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])?/.exec(message);\n    if (otherLink) {\n      message = message.replace(otherLink[0], '');\n      mwm.link = otherLink[0];\n    }\n    const quote = /^<([^>]+)>\\s([^|]+)\\|?(.*)$/.exec(message);\n    if (quote) {\n      mwm.quote = {\n        author: quote[1],\n        originalMessage: quote[2]\n      };\n      message = quote[3];\n    }\n\n    // prevent XSS:\n    const temp = document.createElement('div');\n    temp.textContent = message;\n    message = temp.innerHTML;\n    // end of xss prevention\n\n    // replacing memes\n    const faces = message.match(/:([a-zA-Z0-9]+):/g);\n    if (faces) {\n      faces.forEach(face => {\n        const realName = face.replace(':', '').replace(':', '');\n        const realLocation = EmoteList.getFace(realName, author);\n        if (realLocation) {\n          message = message.replace(face, '<img src=\"' + realLocation + '\" class=\"faceEmote ' + realName + '\" data-name=\"' +\n                                          realName + '\" title=\":' + realName + '\" alt=\":' + realName + '\"/>');\n        }\n      });\n    }\n\n    const memes = message.match(/;([a-zA-Z0-9]+);/g);\n    if (memes) {\n      memes.forEach(meme => {\n        const realName = meme.replace(';', '').replace(';', '');\n        const realLocation = EmoteList.getMeme(realName, author);\n        if (realLocation) {\n          message = message.replace(meme, '<img src=\"' + realLocation + '\" class=\"memeEmote ' + realName + '\" data-name=\"' + realName +\n                                          '\" title=\";' + realName + '\" alt=\";' + realName + '\"/>');\n        }\n      });\n    }\n\n    mwm.message = PostProcessor.processPings(message, me);\n    return mwm;\n  }\n\n  public static processPings(mwm: string, me: string) {\n    const regex = ValidRegex.getRegex(ValidRegex.pingRegex(me));\n    const result = regex.exec(mwm);\n    if(result) {\n      mwm = '';\n      if(result[1]) {\n        mwm += result[1];\n      }\n      if(result[2]) {\n        mwm += result[2];\n      }\n      mwm += '<b class=\"ping\">' + result[3] + '</b>';\n      if(result[4]) {\n        mwm += result[4];\n      }\n      if(result[5]) {\n        mwm += result[5];\n      }\n      mwm = mwm.replace(', ,', ',');\n    }\n    return mwm;\n  }\n\n  public static deconverHTML(msg: string): string {\n    const matchs = msg.match(/\\<img\\ssrc\\=\\\"([^\"]+)\\\"\\sclass\\=\\\"([^\"]+)\\\"\\sdata-name=\"([^\"]+)\"\\stitle=\"([^\"]+)\"\\salt=\"([^\"]+)\"\\/\\>/g);\n    if (matchs) {\n      matchs.forEach(match => {\n        const data = /\\<img\\ssrc\\=\\\"([^\"]+)\\\"\\sclass\\=\\\"([^\"]+)\\\"\\sdata-name=\"([^\"]+)\"\\stitle=\"([^\"]+)\"\\salt=\"([^\"]+)\"\\/\\>/.exec(match);\n        msg = msg.replace(data[0], data[4]);\n      });\n    }\n    return msg;\n  }\n\n  public static processUserMetadata(user: string): UserWithMetadata {\n    const mod = user[0];\n    if (mod === '~' ||\n        mod === '&' ||\n        mod === '@' ||\n        mod === '%' ||\n        mod === '+') {\n      user = user.slice(1);\n    }\n    const out = new UserWithMetadata();\n    out.nick = user;\n    if (mod === '~') {\n      out.status = UserStatuses.FOUNDER;\n    } else if (mod === '&') {\n      out.status = UserStatuses.NET_OPERATOR;\n    } else if (mod === '@') {\n      out.status = UserStatuses.OPERATOR;\n    } else if (mod === '%') {\n      out.status = UserStatuses.HALF_OPERATOR;\n    } else if (mod === '+') {\n      out.status = UserStatuses.VOICE;\n    }\n    return out;\n  }\n\n}\n\n\nexport class UserWithMetadata {\n  public nick: string;\n  public status: UserStatuses;\n  public isNetOp?: boolean;\n  public randomB?: boolean;\n  public away?: boolean;\n  public serverConnected?: string;\n}\n\nexport class MessageWithMetadata {\n  public message: string;\n  public youtube?: string;\n  public image?: string;\n  public link?: string;\n  public quote?: QuoteMessage;\n}\n\nexport class QuoteMessage {\n  public author: string;\n  public originalMessage: string;\n}\n\nexport enum UserStatuses {\n  FOUNDER = 'FOUNDER',\n  NET_OPERATOR = 'NET_OPERATOR',\n  OPERATOR = 'OPERATOR',\n  HALF_OPERATOR = 'HALF_OPERATOR',\n  VOICE = 'VOICE',\n  BANNED = 'BANNED'\n}\n","import { Time } from './../utils/Time.util';\nimport { ModeHandler } from './../handlers/Mode.handler';\nimport { IndividualMessage, IndividualMessageTypes } from './../dto/IndividualMessage';\nimport { MessageHandler, OnMessageReceived } from './../handlers/Message.handler';\nimport { UserInfoService } from './user-info.service';\nimport { OnTopicUpdate } from './../handlers/ChannelStatus.handler';\nimport { ChannelListHandler, OnChannelList } from './../handlers/ChannelList.handler';\nimport { OnUserList, UsersHandler } from './../handlers/Users.handler';\nimport { PartHandler } from './../handlers/Part.handler';\nimport { KickHandler, OnKick } from './../handlers/Kick.handler';\nimport { JoinHandler, OnJoin } from './../handlers/Join.handler';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Author, ChannelData, GenericMessage } from './ChannelData';\nimport { Join } from '../dto/Join';\nimport { OnPart } from '../handlers/Part.handler';\nimport { Part } from '../dto/Part';\nimport { KickInfo } from '../dto/KickInfo';\nimport { UserInChannel } from '../dto/UserInChannel';\nimport { Channel } from '../dto/Channel';\nimport { OnNickChanged, StatusHandler } from '../handlers/Status.handler';\nimport { NickChange } from '../dto/NickChange';\nimport { User } from '../dto/User';\nimport { ChannelStatusHandler } from '../handlers/ChannelStatus.handler';\nimport { NewMode } from '../dto/NewMode';\nimport { UModes } from '../utils/UModes.utils';\nimport { PostProcessor } from '../utils/PostProcessor';\nimport { ModeratedHandler } from '../handlers/Moderated.handler';\n\n/**\n * Servicio para gestionar mis canales y los usuarios en esos canales\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChannelsService implements OnJoin, OnPart, OnKick, OnUserList, OnChannelList, OnNickChanged, OnTopicUpdate, OnMessageReceived {\n\n  public readonly listChanged: EventEmitter<ChannelData[]> = new EventEmitter<ChannelData[]>();\n  public readonly messagesReceived: EventEmitter<GenericMessage> = new EventEmitter<GenericMessage>();\n  public readonly membersChanged: EventEmitter<{channel: string, users: User[]}> = new EventEmitter<{channel: string, users: User[]}>();\n\n  private channels: ChannelData[] = [];\n\n  public history: { [key: string]: GenericMessage[] };\n\n  constructor(private userSrv: UserInfoService) {\n    // Subscribe to events\n    JoinHandler.setHandler(this);\n    KickHandler.setHandler(this);\n    PartHandler.setHandler(this);\n    UsersHandler.setHandler(this);\n    ChannelListHandler.setHandler(this);\n    StatusHandler.setHandlerNickChanged(this);\n    ChannelStatusHandler.setHandler(this);\n    MessageHandler.setHandler(this);\n    ModeratedHandler.channelModerated.subscribe(d => {\n      // canal moderado:\n      const channel = d.partials[3][0] == '#' ? d.partials[3].substring(1) : d.partials[3];\n      const channelObj = this.channels.find(chnl => chnl.name === channel);\n      if(channelObj) {\n        this.sendSpecialMSG(channelObj, d.body);\n      }\n    });\n    ModeHandler.modeChange.subscribe((d: NewMode) => {\n      if(d.channelTarget != d.userTarget.nick) {\n        const channel = d.channelTarget[0] == '#' ? d.channelTarget.substring(1) : d.channelTarget;\n        const channelObj = this.channels.find(chnl => chnl.name === channel);\n        if(channelObj) {\n          const user = channelObj.users.find(user => user.nick === d.userTarget.nick);\n          if(user) {\n            if(d.modeAdded) {\n              if(d.mode.indexOf('q') > -1) {\n                user.mode = UModes.FOUNDER;\n              } else if(d.mode.indexOf('a') > -1 || d.mode.indexOf('A') > -1) {\n                user.mode = UModes.ADMIN;\n              } else if(d.mode.indexOf('o') > -1 || d.mode.indexOf('O') > -1) {\n                user.mode = UModes.OPER;\n              } else if(d.mode.indexOf('h') > -1 || d.mode.indexOf('H') > -1) {\n                user.mode = UModes.HALFOPER;\n              } else if(d.mode.indexOf('v') > -1 || d.mode.indexOf('V') > -1) {\n                user.mode = UModes.VOICE;\n              }\n            } else {\n              user.mode = undefined; // FIXME: acá habría que ver que modos le quedan.\n            }\n            this.membersChanged.emit({\n              channel,\n              users: channelObj.users\n            });\n          }\n\n          const action = d.modeAdded ? 'agregó' : 'quitó';\n          const mod = d.modeAdded ? '+' : '-';\n          this.sendSpecialMSG(channelObj, 'Se ' + action + ' el modo \"' + mod + d.mode + '\" a ' + d.userTarget.nick);\n        }\n      } else {\n        // modo de canal\n        const channel = d.channelTarget[0] == '#' ? d.channelTarget.substring(1) : d.channelTarget;\n        const channelObj = this.channels.find(chnl => chnl.name === channel);\n        if(channelObj) {\n          this.sendSpecialMSG(channelObj, 'Se cambió el modo del canal: ' + d.mode);\n        }\n      }\n    });\n    this.history = JSON.parse(localStorage.getItem('chan_history'));\n    if(!this.history) {\n      this.history = {};\n    }\n  }\n\n  saveHistory(channel: string, msg: GenericMessage) {\n    if (!this.history[channel]) {\n      this.history[channel] = [];\n    }\n    const msC = Object.assign({}, msg);\n    msC.fromHistory = true;\n    this.history[channel].push(msC);\n    localStorage.setItem('chan_history', JSON.stringify(this.history));\n  }\n\n  getHistory(author: string): GenericMessage[] {\n    return this.history[author];\n  }\n\n  onChannelList(user: string, channels: Channel[]) {\n    // actualizamos nuestra lista de canales:\n    if (user === this.userSrv.getNick()) {\n      // agregamos nuevos canales\n      const actualChnls = [];\n      channels.forEach(channel => {\n        const oldChnl = this.channels.find(chnl => chnl.name === channel.name);\n        if (!oldChnl) {\n          this.addChannel(channel.name);\n        }\n        actualChnls.push(channel.name);\n      });\n      // buscamos elementos inexistentes\n      this.channels.forEach((channel, idx) => {\n        if (!actualChnls.find(chName => chName === channel.name)) {\n          this.channels.splice(idx, 1);\n        }\n      });\n      this.listChanged.emit(this.channels);\n    }\n  }\n\n  private addChannel(channel: string) {\n    const nChannel = new ChannelData();\n    nChannel.name = channel;\n    nChannel.topic = ChannelStatusHandler.getChannelTopic(nChannel.name);\n    nChannel.messages = []; // Get from log?\n    this.channels.push(nChannel);\n    return nChannel;\n  }\n\n  onUserList(channel: string, users: UserInChannel[]) {\n    let channelObj = this.channels.find(chnl => chnl.name === channel);\n    // si no existe este canal lo agregamos.\n    if (!channelObj) {\n      channelObj = this.addChannel(channel);\n    }\n    const actualUsers = [];\n    users.forEach(currentUser => {\n      const oldUser = channelObj.users.find(user => user.nick === currentUser.nick);\n      if (!oldUser) {\n        const newUser = new User(currentUser.nick);\n        newUser.mode = currentUser.mode;\n        channelObj.users.push(newUser);\n      } else {\n        oldUser.mode = currentUser.mode;\n      }\n      actualUsers.push(currentUser.nick);\n    });\n    // buscamos usuarios que ya no estan\n    channelObj.users.forEach((user, idx) => {\n      if (!actualUsers.find(acu => user.nick === acu)) {\n        channelObj.users.splice(idx, 1);\n      }\n    });\n    this.membersChanged.emit({channel: channel, users: channelObj.users});\n  }\n\n  private sendSpecialMSG(channel: ChannelData, message: string) {\n    const msg: GenericMessage = {\n      message: message,\n      date: Time.getTime() + ' ' + Time.getDateStr(),\n      special: false,\n      target: channel.name,\n      notify: true\n    };\n    channel.messages.push(msg);\n    this.messagesReceived.emit(msg);\n  }\n\n  onKick(data: KickInfo) {\n    if (data.userTarget.nick === this.userSrv.getNick()) {\n      this.channels.splice(this.channels.findIndex(chan => chan.name === data.channel.name));\n      this.listChanged.emit(this.channels);\n    } else {\n      const chnlObj = this.channels.find(chnl => chnl.name === data.channel.name);\n      if (chnlObj) {\n        const idx = chnlObj.users.findIndex(user => user.nick === data.userTarget.nick);\n        if (idx >= 0) {\n          chnlObj.users.splice(idx, 1);\n        }\n      } else {\n        console.error('No se encontró el canal en el que se kickeó el usuario.', data.channel);\n      }\n      this.membersChanged.emit({channel: data.channel.name, users: chnlObj.users});\n      this.sendSpecialMSG(chnlObj, data.userTarget.nick + ' fué kickeado/a del canal por '+ data.operator +'.');\n    }\n\n  }\n\n  onPart(data: Part) {\n    if (data.user.nick === this.userSrv.getNick()) {\n      this.channels.splice(this.channels.findIndex(chan => chan.name === data.channel.name), 1);\n      this.listChanged.emit(this.channels);\n    } else {\n      const chnlObj = this.channels.find(chnl => chnl.name === data.channel.name);\n      if (chnlObj) {\n        const idx = chnlObj.users.findIndex(user => user.nick === data.user.nick);\n        if (idx >= 0) {\n          chnlObj.users.splice(idx, 1);\n        }\n      } else {\n        console.error('No se encontró el canal en el que partió el usuario.', data.channel);\n      }\n      this.membersChanged.emit({channel: data.channel.name, users: chnlObj.users});\n      this.sendSpecialMSG(chnlObj, data.user.nick + ' se fué del canal');\n    }\n  }\n\n  onJoin(data: Join) {\n    if (data.user.nick === this.userSrv.getNick()) {\n      if (!this.channels.find(chnl => chnl.name === data.channel.name)) {\n        this.addChannel(data.channel.name);\n      }\n      this.listChanged.emit(this.channels);\n    } else {\n      const chnlObj = this.channels.find(chnl => chnl.name === data.channel.name);\n      if (chnlObj) {\n        const newUser = new User(data.user.nick);\n        newUser.mode = data.user.mode;\n        chnlObj.users.push(newUser);\n      } else {\n        console.error('No se encontró el canal en el que se unió el usuario.', data.channel);\n      }\n      this.membersChanged.emit({channel: data.channel.name, users: chnlObj.users});\n      this.sendSpecialMSG(chnlObj, data.user.nick + ' se unió al canal');\n    }\n  }\n\n  onNickChanged(nick: NickChange) {\n    // buscar en la lista de usuarios en cada canal el nick y cambiarlo\n    this.channels.forEach((chnl: ChannelData) => {\n      const oldUsr = chnl.users.find(usr => usr.nick === nick.oldNick);\n      oldUsr.nick = nick.newNick;\n      this.membersChanged.emit({channel: chnl.name, users: chnl.users});\n      this.sendSpecialMSG(chnl, nick.oldNick + ' se cambió el nick a ' + nick.newNick);\n    });\n  }\n\n  onTopicUpdate(channel: string, newTopic: string) {\n    if(channel[0] === '#') {\n      channel = channel.substring(1);\n    }\n    const chnlObj = this.channels.find(chnl => chnl.name === channel);\n    if (chnlObj) {\n      chnlObj.topic = newTopic;\n    } else {\n      console.error('No se encontró el canal en el que se cambió el topic. ', channel);\n    }\n  }\n\n  getChannels() {\n    return this.channels;\n  }\n\n  getChannel(channel: string) {\n    return this.channels.find(chanObj => chanObj.name == channel);\n  }\n\n  onMessageReceived(message: IndividualMessage) {\n    if(message.messageType == IndividualMessageTypes.CHANMSG) {\n      const tgtChan =  message.channel[0] == '#' ?  message.channel.substring(1) :  message.channel;\n      const chanObj = this.channels.find(chan => chan.name == tgtChan);\n      const msg: GenericMessage = {\n        message: (message.message as string),\n        messageWithMetadata:  PostProcessor.processMessage(message.message as string, message.author, this.userSrv.getNick()),\n        author: new Author<string>(message.author),\n        date: message.date + ' ' + message.time,\n        special: message.meAction,\n        target: tgtChan\n      };\n      chanObj.messages.push(msg);\n      this.messagesReceived.emit(msg);\n      this.saveHistory(tgtChan, msg)\n    }\n  }\n}\n","import { GenericMessage } from './ChannelData';\nexport class PrivmsgData {\n  public user: string;\n  public messages: GenericMessage[] = [];\n}\n","import { EventEmitter, Injectable } from '@angular/core';\nimport { IndividualMessage, IndividualMessageTypes } from '../dto/IndividualMessage';\nimport { MessageHandler, OnMessageReceived } from '../handlers/Message.handler';\nimport { PostProcessor } from '../utils/PostProcessor';\nimport { GenericMessage, Author } from './ChannelData';\nimport { PrivmsgData } from './PrivmsgData';\nimport { UserInfoService } from './user-info.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrivmsgService implements OnMessageReceived {\n\n  public readonly messagesReceived: EventEmitter<GenericMessage> = new EventEmitter<GenericMessage>();\n  public readonly newPrivOpened: EventEmitter<string> = new EventEmitter<string>();\n  public readonly closedPriv: EventEmitter<string> = new EventEmitter<string>();\n  public privMsgs: { [key: string]: PrivmsgData } = {};\n\n  public history: { [key: string]: GenericMessage[] };\n\n  constructor(private userSrv: UserInfoService) {\n    MessageHandler.setHandler(this);\n    this.history = JSON.parse(localStorage.getItem('pv_history'));\n    if(!this.history) {\n      this.history = {};\n    }\n  }\n\n  onMessageReceived(message: IndividualMessage) {\n    if(message.messageType == IndividualMessageTypes.PRIVMSG) {\n      const msgAuthor = message.privateAuthor ? message.privateAuthor : message.author;\n      const msg: GenericMessage = {\n        message: (message.message as string),\n        messageWithMetadata:  PostProcessor.processMessage(message.message as string, msgAuthor, this.userSrv.getNick()),\n        author: new Author<string>(msgAuthor),\n        date: message.date + ' ' + message.time,\n        special: message.meAction,\n        target: message.channel\n      };\n      if(this.privMsgs[message.author]) {\n        this.privMsgs[message.author].messages.push(msg);\n      } else {\n        this.newPrivOpened.emit(message.author);\n        this.privMsgs[message.author] = new PrivmsgData();\n        this.privMsgs[message.author].user = message.author;\n        this.privMsgs[message.author].messages.push(msg);\n      }\n      this.messagesReceived.emit(msg);\n      this.saveHistory(message.author, msg);\n\n    }\n  }\n\n  saveHistory(author: string, msg: GenericMessage) {\n    if (!this.history[author]) {\n      this.history[author] = [];\n    }\n    const msC = Object.assign({}, msg);\n    msC.fromHistory = true;\n    this.history[author].push(msC);\n    localStorage.setItem('pv_history', JSON.stringify(this.history));\n  }\n\n  getHistory(author: string): GenericMessage[] {\n    return this.history[author];\n  }\n\n  getPrivate(nick: string): PrivmsgData {\n    if(!this.privMsgs[nick]) {\n      this.privMsgs[nick] = new PrivmsgData();\n      this.privMsgs[nick].user = nick;\n      this.newPrivOpened.emit(nick);\n    }\n    return this.privMsgs[nick];\n  }\n\n  closePrivate(nick: string) {\n    delete this.privMsgs[nick];\n    this.closedPriv.emit(nick);\n  }\n\n}\n","import { IRCMessage } from './../utils/IRCMessage.util';\nimport { ServerHandler } from './../handlers/Server.handler';\nimport { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerMsgService {\n\n  public readonly messages: IRCMessage[] = [];\n  public readonly newMessage: EventEmitter<IRCMessage> = new EventEmitter<IRCMessage>();\n\n  constructor() {\n    ServerHandler.serverResponse.subscribe((d: IRCMessage) => {\n      this.messages.push(d);\n      this.newMessage.emit(d);\n    })\n    ServerHandler.serverNoticeResponse.subscribe((d: IRCMessage) => {\n      this.messages.push(d);\n      this.newMessage.emit(d);\n    });\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Who } from '../dto/Who';\nimport { WhoHandler } from '../handlers/Who.handler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WhoStatusService {\n\n  public whoStatus: {[key: string]: Who} = {};\n\n  constructor() {\n    WhoHandler.onWhoResponse.subscribe((dW: Who) => {\n      this.whoStatus[dW.nick] = dW;\n    });\n  }\n\n  public isAway(nick: string) {\n    if(this.whoStatus[nick] && this.whoStatus[nick].isAway) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}